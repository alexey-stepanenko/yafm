#Использовать fs
#Использовать v8runner

Перем ИмяРелиза; // Возвращаемое значение
Перем РасширениеФайлаРелиза; // Возвращаемое значение
Перем ОсновнаяПодсистема; // Возвращаемое значение
Перем Подсистемы; // Возвращаемое значение
Перем ИсключаемыеПодсистемы; // Возвращаемое значение

Перем КаталогИсходников;
Перем ИмяФайлаКонфигурации;
Перем НачалоБлокаРежимаРазработки;
Перем КонецБлокаРежимаРазработки;

#Область ПрограммныйИнтерфейс

Процедура Инициализировать(ПараметрыКонструктора) Экспорт
    ИмяРелиза = СтрШаблон(
		"%1-cf-main-%2",
		ПараметрыКонструктора.ПрефиксИмениФайлаРелиза,
		ПараметрыКонструктора.НомерРелиза
	);

	РасширениеФайлаРелиза = ".cf";
	ИмяФайлаКонфигурации = ПараметрыКонструктора.ИмяФайлаКонфигурации;
	ОсновнаяПодсистема = "МодификацияФормПодсистемы";
	ИсключаемыеПодсистемы = "";
    НачалоБлокаРежимаРазработки = ПараметрыКонструктора.НачалоБлокаРежимаРазработки;
    КонецБлокаРежимаРазработки = ПараметрыКонструктора.КонецБлокаРежимаРазработки;
КонецПроцедуры

Функция ИмяРелиза() Экспорт
	Возврат ИмяРелиза;	
КонецФункции

Функция РасширениеФайлаРелиза() Экспорт
	Возврат РасширениеФайлаРелиза;
КонецФункции

Функция ОсновнаяПодсистема() Экспорт
    Возврат ОсновнаяПодсистема;    
КонецФункции

Функция Подсистемы() Экспорт
    Если Подсистемы = Неопределено Тогда
        Подсистемы = ПодсистемыПоБазовойПодсистеме(
            "МодификацияФормПодсистемы", 
            "МФИнструментыРазработчика"
        );
    КонецЕсли;

    Возврат Подсистемы;    
КонецФункции

Функция ИсключаемыеПодсистемы() Экспорт
    Возврат ИсключаемыеПодсистемы;    
КонецФункции

Процедура УстановитьКаталогИсходников(Каталог) Экспорт
	КаталогИсходников = Каталог;
КонецПроцедуры

Процедура СкорректироватьМодули(ОбъектыПоставки) Экспорт
    Для Каждого ОбъектПоставки Из ОбъектыПоставки Цикл
        Описание = ОбъектПоставки.Значение;
        ПутьКФайлуМодуля = "";
        Если Описание.Тип = "CommonModule" Тогда
            СоставПути = Новый Массив;
            СоставПути.Добавить(КаталогИсходников);
            СоставПути.Добавить("CommonModules");
            СоставПути.Добавить(Описание.Имя);
            СоставПути.Добавить("Ext");
            СоставПути.Добавить("Module.bsl");
            ПутьКФайлуМодуля = СтрСоединить(СоставПути, ПолучитьРазделительПути());
        КонецЕсли;

        Если ПутьКФайлуМодуля = "" Тогда
            Продолжить;
        КонецЕсли;

        ТекстовыйДокумент = Новый ТекстовыйДокумент;
        ТекстовыйДокумент.Прочитать(ПутьКФайлуМодуля);
        ИсходныйТекст = ТекстовыйДокумент.ПолучитьТекст();
        Если СтрНайти(ИсходныйТекст, НачалоБлокаРежимаРазработки) = 0 Тогда
            Продолжить;
        КонецЕсли;
        СоставСкорректированногоФайла = Новый Массив;
        НашлиУдаляемыйБлок = Ложь;
        Для НомерСтроки = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
            ПроверяемаяСтрока = ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки);
            Если СокрЛП(ПроверяемаяСтрока) = НачалоБлокаРежимаРазработки Тогда
                НашлиУдаляемыйБлок = Истина;
            ИначеЕсли СокрЛП(ПроверяемаяСтрока) = КонецБлокаРежимаРазработки Тогда
                НашлиУдаляемыйБлок = Ложь;
            ИначеЕсли Не НашлиУдаляемыйБлок Тогда
                СоставСкорректированногоФайла.Добавить(ПроверяемаяСтрока);
            Иначе // BSLLS:EmptyCodeBlock-off
                // пустой блок
            КонецЕсли;
        КонецЦикла;

        ТекстовыйДокумент.УстановитьТекст(СтрСоединить(
            СоставСкорректированногоФайла, 
            Символы.ПС
        ));
        ТекстовыйДокумент.Записать(ПутьКФайлуМодуля);
    КонецЦикла;
КонецПроцедуры

Процедура СкорректироватьФайлОсновнойПодсистемы(ОбъектыПоставки) Экспорт
    ПроцессорXML = Новый СериализацияДанныхXML();

    ПутьКФайлуОсновнойПодсистемы = ОбъединитьПути(
        КаталогИсходников, 
        "Subsystems",
        ОсновнаяПодсистема + ".xml"
    );
    КонфигурацияПодсистемы = ПроцессорXML.ПрочитатьИзФайла(ПутьКФайлуОсновнойПодсистемы);
    СкорректироватьОбъектыОсновнойПодсистемы(КонфигурацияПодсистемы, ОбъектыПоставки);
    ПроцессорXML.ЗаписатьВФайл(КонфигурацияПодсистемы, ПутьКФайлуОсновнойПодсистемы);
    ТекстовыйДокумент = Новый ТекстовыйДокумент;
    ТекстовыйДокумент.Прочитать(ПутьКФайлуОсновнойПодсистемы);
    ТекстФайлаОсновнойПодсистемы = СтрЗаменить(
        ТекстовыйДокумент.ПолучитьТекст(),
        "<xr:Item>",
        "<xr:Item  xsi:type=""xr:MDObjectRef"">"
    );
    ТекстовыйДокумент.УстановитьТекст(ТекстФайлаОсновнойПодсистемы);
    ТекстовыйДокумент.Записать(ПутьКФайлуОсновнойПодсистемы);
КонецПроцедуры

Процедура СкорректироватьФайлКонфигурации(ОбъектыПоставки) Экспорт
    ПроцессорXML = Новый СериализацияДанныхXML();

	ПутьКФайлуКонфигурации = ОбъединитьПути(КаталогИсходников, ИмяФайлаКонфигурации);
    Конфигурация = ПроцессорXML.ПрочитатьИзФайла(ПутьКФайлуКонфигурации);
	СкорректироватьОбъектыКонфигурации(Конфигурация, ОбъектыПоставки);
    ПроцессорXML.ЗаписатьВФайл(Конфигурация, ПутьКФайлуКонфигурации);
КонецПроцедуры

Процедура ВыполнитьДополнительныеДействия() Экспорт
    ПутьКОчищаемомуКаталогу = ОбъединитьПути(КаталогИсходников, "Ext");
    ФС.ОбеспечитьПустойКаталог(ПутьКОчищаемомуКаталогу);
КонецПроцедуры

Процедура СоздатьФайлПоставки(ПутьКФайлуПоставки) Экспорт
    Конфигуратор = Новый УправлениеКонфигуратором();
    Конфигуратор.ЗагрузитьКонфигурациюИзФайлов(КаталогИсходников);
    Конфигуратор.ОбновитьКонфигурациюБазыДанных();
    Конфигуратор.СоздатьФайлыПоставки(ПутьКФайлуПоставки);
	УдалитьФайлы(Конфигуратор.ПутьКВременнойБазе());
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПодсистемыПоБазовойПодсистеме(БазоваяПодсистема, ИсключаемыеПодсистемы)
    СписокИсключаемыхПодсистем = СтрРазделить(ИсключаемыеПодсистемы, ",");
    СписокПодсистем = Новый Массив;
    ПроцессорXML = Новый СериализацияДанныхXML(Ложь);
    ПутьКФайлуОсновнойПодсистемы = ОбъединитьПути(
        КаталогИсходников,
        "Subsystems",
        БазоваяПодсистема + ".xml"
    );
    КонфигурацияПодсистемы = ПроцессорXML.ПрочитатьИзФайла(ПутьКФайлуОсновнойПодсистемы);
    Описание = КонфигурацияПодсистемы
        ._Элементы
        .Получить("MetaDataObject")
        ._Элементы
        .Получить("Subsystem")
        ._Элементы
        .Получить("ChildObjects")
        ._Элементы
    ;
    ТипЗначенияОписания = ТипЗнч(Описание);
    Если ТипЗначенияОписания = Тип("Массив") Тогда
        Для Каждого Элемент Из Описание Цикл
            ОбработатьПодчиненнуюПодсистему(Элемент, СписокПодсистем, БазоваяПодсистема, СписокИсключаемыхПодсистем);
        КонецЦикла;
    ИначеЕсли ТипЗначенияОписания = Тип("Соответствие") Тогда
        ОбработатьПодчиненнуюПодсистему(Описание, СписокПодсистем, БазоваяПодсистема, СписокИсключаемыхПодсистем);
    Иначе // BSLLS:EmptyCodeBlock-off
        // Пустой блок
    КонецЕсли;
    Возврат СтрСоединить(СписокПодсистем, ",");
КонецФункции

Процедура ОбработатьПодчиненнуюПодсистему(Описание, СписокПодсистем, БазоваяПодсистема, СписокИсключаемыхПодсистем);
    ПараметрыОписания = Описание.Получить("Subsystem");
    Если ПараметрыОписания = Неопределено Тогда
        Возврат;
    КонецЕсли;
    НазваниеПодсистемы = ПараметрыОписания._Значение;
    Если СписокИсключаемыхПодсистем.Найти(НазваниеПодсистемы) = Неопределено Тогда
        СписокПодсистем.Добавить(БазоваяПодсистема + "." + НазваниеПодсистемы);        
    КонецЕсли;
КонецПроцедуры

Процедура СкорректироватьОбъектыОсновнойПодсистемы(КонфигурацияПодсистемы, ОбъектыПоставки)
    // Очищаем список подчиненных подсистем
    Описание = КонфигурацияПодсистемы
        .Получить("MetaDataObject")
        ._Элементы
        .Получить("Subsystem")
        ._Элементы
    ;
    Описание.Вставить("ChildObjects", Неопределено);
    
    // Добавляем объекты
    Описание = КонфигурацияПодсистемы
        .Получить("MetaDataObject")
        ._Элементы
        .Получить("Subsystem")
        ._Элементы
        .Получить("Properties")
    ;

    ОбъектыПоИмени = СортированныеОбъектыПоИмени(ОбъектыПоставки);
    ОбъектыПодсистемы = Новый Массив;
    
    Для Каждого Элемент Из ОбъектыПоИмени Цикл
        Если Элемент = "Subsystem." + ОсновнаяПодсистема Тогда
            Продолжить;
        КонецЕсли;
        ОбъектПоставки = ОбъектыПоставки.Получить(Элемент);
        Если ОбъектПоставки.Тип = "Language" Тогда
            Продолжить;
        КонецЕсли;
        ОбъектПодсистемы = Новый Соответствие;
        ОписаниеОбъекта = Новый Структура;
        ОписаниеОбъекта.Вставить("_Значение", Элемент);
        
        ОбъектПодсистемы.Вставить("xr:Item", ОписаниеОбъекта);
        ОбъектыПодсистемы.Добавить(ОбъектПодсистемы);
    КонецЦикла;

    Описание.Вставить("Content", ОбъектыПодсистемы);
КонецПроцедуры

Процедура СкорректироватьОбъектыКонфигурации(Конфигурация, ОбъектыПоставки)
    Коллекция = Конфигурация
        .Получить("MetaDataObject")
        ._Элементы
        .Получить("Configuration")
        ._Элементы
        .Получить("ChildObjects")
    ;
    Коллекция.Очистить();
    ОбъектыПоИмени = СортированныеОбъектыПоИмени(ОбъектыПоставки);
    Для Каждого ИмяОбъекта Из ОбъектыПоИмени Цикл
        ЭлементКоллекции = ОбъектыПоставки.Получить(ИмяОбъекта);
        Объект = Новый Соответствие;
        Объект.Вставить(ЭлементКоллекции.Тип, ЭлементКоллекции.Имя);
        Коллекция.Добавить(Объект);
    КонецЦикла;
КонецПроцедуры

Функция СортированныеОбъектыПоИмени(Объекты)
    Результат = Новый Массив;
    СписокЗначений = Новый СписокЗначений;
    Для Каждого ЭлементКоллекции Из Объекты Цикл
        СписокЗначений.Добавить(ЭлементКоллекции.Ключ);
    КонецЦикла;
    СписокЗначений.СортироватьПоЗначению();
    Результат = СписокЗначений.ВыгрузитьЗначения();
    
    Возврат Результат;
КонецФункции

#КонецОбласти

Подсистемы = Неопределено;