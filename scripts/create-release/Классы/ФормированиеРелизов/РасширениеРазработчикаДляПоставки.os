#Использовать fs
#Использовать v8runner

Перем ИмяРелиза; // Возвращаемое значение
Перем РасширениеФайлаРелиза; // Возвращаемое значение
Перем ОсновнаяПодсистема; // Возвращаемое значение
Перем Подсистемы; // Возвращаемое значение
Перем ИсключаемыеПодсистемы; // Возвращаемое значение

Перем ГУИДРасширения;
Перем ИмяФайлаКонфигурации;
Перем КаталогИсходников;
Перем НачалоБлокаРежимаРазработки;
Перем КонецБлокаРежимаРазработки;
Перем ПерехваченныеМодули;
Перем Префикс;
Перем ИмяКонфигурации;

#Область ПрограммныйИнтерфейс

Процедура Инициализировать(ПараметрыКонструктора) Экспорт
	ИмяРелиза = СтрШаблон(
		"%1-cf-dev-%2",
		ПараметрыКонструктора.ПрефиксИмениФайлаРелиза,
		ПараметрыКонструктора.НомерРелиза
	);

	РасширениеФайлаРелиза = ".cfe";
	ИмяФайлаКонфигурации = ПараметрыКонструктора.ИмяФайлаКонфигурации;
	ОсновнаяПодсистема = "МодификацияФорм";
	Подсистемы = "МодификацияФормПодсистемы.МФИнструментыРазработчика";
	ИсключаемыеПодсистемы = "";
    НачалоБлокаРежимаРазработки = ПараметрыКонструктора.НачалоБлокаРежимаРазработки;
    КонецБлокаРежимаРазработки = ПараметрыКонструктора.КонецБлокаРежимаРазработки;
    Префикс = "мф_";
    ГУИДРасширения = "97a25638-fbfe-498b-b6a3-10e29a2c565e";
КонецПроцедуры

Функция ИмяРелиза() Экспорт
	Возврат ИмяРелиза;	
КонецФункции

Функция РасширениеФайлаРелиза() Экспорт
	Возврат РасширениеФайлаРелиза;
КонецФункции

Функция ОсновнаяПодсистема() Экспорт
    Возврат ОсновнаяПодсистема;    
КонецФункции

Функция Подсистемы() Экспорт
    Возврат Подсистемы;    
КонецФункции

Функция ИсключаемыеПодсистемы() Экспорт
    Возврат ИсключаемыеПодсистемы;    
КонецФункции

Процедура УстановитьКаталогИсходников(Каталог) Экспорт
	КаталогИсходников = Каталог;
КонецПроцедуры

Процедура СкорректироватьМодули(ОбъектыПоставки) Экспорт
    ПерехваченныеМодули = Новый Соответствие;

    Для Каждого ОбъектПоставки Из ОбъектыПоставки Цикл
        Описание = ОбъектПоставки.Значение;
        ПутьКФайлуМодуля = "";
        ПутьКФайлуОписания = "";
        Если Описание.Тип = "CommonModule" Тогда
            СоставПути = Новый Массив;
            СоставПути.Добавить(КаталогИсходников);
            СоставПути.Добавить("CommonModules");
            СоставПути.Добавить(Описание.Имя);
            СоставПути.Добавить("Ext");
            СоставПути.Добавить("Module.bsl");
            ПутьКФайлуМодуля = СтрСоединить(СоставПути, ПолучитьРазделительПути());

            ПутьКФайлуОписания = ОбъединитьПути(
                КаталогИсходников,
                "CommonModules",
                Описание.Имя + ".xml"
            );
        КонецЕсли;

        Если ПутьКФайлуМодуля = "" Тогда
            Продолжить;
        КонецЕсли;

        Если СкорректироватьТекстМодуля(ПутьКФайлуМодуля) Тогда
            СкорректироватьОписаниеМодуля(ОбъектПоставки.Ключ, ПутьКФайлуОписания, ПерехваченныеМодули);
        КонецЕсли;
    КонецЦикла;
КонецПроцедуры

Процедура СкорректироватьФайлОсновнойПодсистемы(ОбъектыПоставки) Экспорт
    ПроцессорXML = Новый СериализацияДанныхXML();

    ПутьКФайлуОсновнойПодсистемы = ОбъединитьПути(
        КаталогИсходников, 
        "Subsystems",
        ОсновнаяПодсистема + ".xml"
    );
    КонфигурацияПодсистемы = ПроцессорXML.ПрочитатьИзФайла(ПутьКФайлуОсновнойПодсистемы);
    СкорректироватьОбъектыОсновнойПодсистемы(КонфигурацияПодсистемы, ОбъектыПоставки);
    ПроцессорXML.ЗаписатьВФайл(КонфигурацияПодсистемы, ПутьКФайлуОсновнойПодсистемы);
    ТекстовыйДокумент = Новый ТекстовыйДокумент;
    ТекстовыйДокумент.Прочитать(ПутьКФайлуОсновнойПодсистемы);
    ТекстФайлаОсновнойПодсистемы = СтрЗаменить(
        ТекстовыйДокумент.ПолучитьТекст(),
        "<xr:Item>",
        "<xr:Item  xsi:type=""xr:MDObjectRef"">"
    );
    ТекстовыйДокумент.УстановитьТекст(ТекстФайлаОсновнойПодсистемы);
    ТекстовыйДокумент.Записать(ПутьКФайлуОсновнойПодсистемы);
КонецПроцедуры

Процедура СкорректироватьФайлКонфигурации(ОбъектыПоставки) Экспорт
    ПроцессорXML = Новый СериализацияДанныхXML();

	ПутьКФайлуКонфигурации = ОбъединитьПути(КаталогИсходников, ИмяФайлаКонфигурации);
    Конфигурация = ПроцессорXML.ПрочитатьИзФайла(ПутьКФайлуКонфигурации);
    ИзменитьГУИДКонфигурации(Конфигурация);
    ДобавитьСвойстваКонфигурации(Конфигурация);
	СкорректироватьОбъектыКонфигурации(Конфигурация, ОбъектыПоставки);
    ПроцессорXML.ЗаписатьВФайл(Конфигурация, ПутьКФайлуКонфигурации);
КонецПроцедуры

Процедура ВыполнитьДополнительныеДействия() Экспорт
    // Исправляем файл Ext/CommandInterface.xml: Оставить главную подсистему
    ПроцессорXML = Новый СериализацияДанныхXML(Ложь);
	ПутьКФайлуКомандногоИнтерфейса = ОбъединитьПути(
        КаталогИсходников,
        "Ext",
        "CommandInterface.xml"
    );
    КомандныйИнтерфейс = ПроцессорXML.ПрочитатьИзФайла(ПутьКФайлуКомандногоИнтерфейса);
    Элемент = Новый Соответствие;
    Элемент.Вставить("Subsystem", "Subsystem." + ОсновнаяПодсистема);
    Коллекция = КомандныйИнтерфейс
        ._Элементы
        .Получить("CommandInterface")
        ._Элементы
    ;
    Коллекция.Вставить("SubsystemsOrder", Элемент);
    ПроцессорXML.ЗаписатьВФайл(КомандныйИнтерфейс, ПутьКФайлуКомандногоИнтерфейса);

    // Удаляем все файлы из Ext, за исключением командного интерфейса и модуля приложения
    Исключения = Новый Массив;
    Исключения.Добавить("CommandInterface.xml");
    Исключения.Добавить("ManagedApplicationModule.bsl");
    ПутьКОчищаемомуКаталогу = ОбъединитьПути(
        КаталогИсходников,
        "Ext"
    );
    НайденныеФайлы = НайтиФайлы(ПутьКОчищаемомуКаталогу, "*.*");
    Для Каждого НайденныйФайл Из НайденныеФайлы Цикл
        Если Исключения.Найти(НайденныйФайл.Имя) <> Неопределено Тогда
            Продолжить;
        КонецЕсли;
        УдалитьФайлы(НайденныйФайл.ПолноеИмя);
    КонецЦикла;

    // Исправляем основной язык
    ПутьКФайлуОсновногоЯзыка = ОбъединитьПути(
        КаталогИсходников,
        "Languages",
        "Русский.xml"
    );
    ОсновнойЯзык = ПроцессорXML.ПрочитатьИзФайла(ПутьКФайлуОсновногоЯзыка);
    Корень = ОсновнойЯзык
        ._Элементы
        .Получить("MetaDataObject")
        ._Элементы
        .Получить("Language")
    ;
    ИсходныйГУИДЯзыка = Корень._Атрибуты.Получить("uuid");
    НовыйГУИДЯзыка = Строка(Новый УникальныйИдентификатор);
    Корень._Атрибуты.Вставить("uuid", НовыйГУИДЯзыка);
    // Корень._Элементы.Вставить("InternalInfo", "");

    Свойства = Корень
        ._Элементы
        .Получить("Properties")
        ._Элементы
    ;
    Свойства.Вставить("ObjectBelonging", "Adopted");
    Свойства.Вставить("ExtendedConfigurationObject", ИсходныйГУИДЯзыка);
    ПроцессорXML.ЗаписатьВФайл(ОсновнойЯзык, ПутьКФайлуОсновногоЯзыка);

    // Исправлям Модуль управляемого приложения
    ПутьКФайлуМодуля = ОбъединитьПути(
        КаталогИсходников,
        "Ext",
        "ManagedApplicationModule.bsl"
    );
    ТекстМодуля = Новый ТекстовыйДокумент;
    ТекстМодуля.Прочитать(ПутьКФайлуМодуля);
    СоставСкорректированногоФайла = Новый Массив;

    НашлиБлокРежимаРазработки = Ложь;
    Идентификатор = "// РЕЖИМРАЗРАБОТКИ:";
    Для Сч = 1 По ТекстМодуля.КоличествоСтрок() Цикл
        ИсходнаяСтрока = ТекстМодуля.ПолучитьСтроку(Сч);
        Если СокрЛП(ИсходнаяСтрока) = НачалоБлокаРежимаРазработки Тогда
            НашлиБлокРежимаРазработки = Истина;
        ИначеЕсли СокрЛП(ИсходнаяСтрока) = КонецБлокаРежимаРазработки Тогда
            НашлиБлокРежимаРазработки = Ложь;
            СоставСкорректированногоФайла.Добавить(Символы.ПС);
        ИначеЕсли НашлиБлокРежимаРазработки Тогда
            ПозицияКомментария = СтрНайти(ИсходнаяСтрока, Идентификатор);
            Если ПозицияКомментария = 0 Тогда
                СоставСкорректированногоФайла.Добавить(ИсходнаяСтрока);
            Иначе
                НачалоСтроки = Лев(ИсходнаяСтрока, ПозицияКомментария - 1);
                КоличествоКопируемыхСимволов = 
                    СтрДлина(ИсходнаяСтрока) 
                    - ПозицияКомментария 
                    - СтрДлина(Идентификатор)
                    + 1
                ;
                СоставСкорректированногоФайла.Добавить(
                    НачалоСтроки + Прав(ИсходнаяСтрока, КоличествоКопируемыхСимволов)
                );
            КонецЕсли;  
        Иначе // BSLLS:EmptyCodeBlock-off
            // пустой блок
        КонецЕсли;
    КонецЦикла;

    ТекстМодуля.УстановитьТекст(СтрСоединить(
        СоставСкорректированногоФайла,
        Символы.ПС
    ));
    ТекстМодуля.Записать(ПутьКФайлуМодуля);
КонецПроцедуры

Процедура СоздатьФайлПоставки(ПутьКФайлуПоставки) Экспорт
    // Меняем структуру каталога исходных файлов для правильной загрузки
    ФайлыДляПереноса = Новый Массив;
    НайденныеФайлы = НайтиФайлы(КаталогИсходников, "*.*");
    Для Каждого НайденныйФайл Из НайденныеФайлы Цикл
        ФайлыДляПереноса.Добавить(НайденныйФайл.ПолноеИмя);
    КонецЦикла;
    НовыйКаталогИсходников = ОбъединитьПути(
        КаталогИсходников,
        ИмяКонфигурации
    );
    ФС.ОбеспечитьПустойКаталог(НовыйКаталогИсходников);
    Для Каждого ИмяФайлДляПереноса Из ФайлыДляПереноса Цикл
        Файл = Новый Файл(ИмяФайлДляПереноса);
        НовыйПутьФайла = ОбъединитьПути(
            НовыйКаталогИсходников, 
            Файл.Имя
        );
        Если Файл.ЭтоФайл() Тогда
            ПереместитьФайл(ИмяФайлДляПереноса, НовыйПутьФайла);
        Иначе
            СоздатьКаталог(НовыйПутьФайла);
            ФС.КопироватьСодержимоеКаталога(ИмяФайлДляПереноса, НовыйПутьФайла);
		    УдалитьФайлы(ИмяФайлДляПереноса);
        КонецЕсли;
    КонецЦикла;

    Конфигуратор = Новый УправлениеКонфигуратором();
    Конфигуратор.ЗагрузитьРасширениеИзФайлов(КаталогИсходников);
    Конфигуратор.ВыгрузитьРасширениеВФайл(ПутьКФайлуПоставки, ИмяКонфигурации);
	УдалитьФайлы(Конфигуратор.ПутьКВременнойБазе());
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СкорректироватьТекстМодуля(ПутьКФайлуМодуля)
    ТекстовыйДокумент = Новый ТекстовыйДокумент;
    ТекстовыйДокумент.Прочитать(ПутьКФайлуМодуля);
    ИсходныйТекст = ТекстовыйДокумент.ПолучитьТекст();
    Если СтрНайти(ИсходныйТекст, НачалоБлокаРежимаРазработки) = 0 Тогда
        Возврат Ложь;
    КонецЕсли;

    РегЭкспНачалоМетода = Новый РегулярноеВыражение(
        "^[ \t]*((Процедура)|(Функция))[ \t]*([^\(\)]*)(\([^\(\)]*\))"
    );
    РегЭкспНачалоМетода.ИгнорироватьРегистр = Истина;
    РегЭкспКонецМетода = Новый РегулярноеВыражение(
        "^[ \t]*((КонецПроцедуры)|(КонецФункции))"
    );
    РегЭкспКонецМетода.ИгнорироватьРегистр = Истина;

    НашлиВставляемыйБлок = Ложь;
    НашлиМетод = Ложь;
    ИмяМетода = "";
    СоставМетода = Новый Массив;
    СоставСкорректированногоФайла = Новый Массив;
    Для НомерСтроки = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
        ПроверяемаяСтрока = ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки);
        Если РегЭкспНачалоМетода.Совпадает(ПроверяемаяСтрока) Тогда
            НашлиМетод = Истина;

            СоставСтроки = РегЭкспНачалоМетода.Разделить(ПроверяемаяСтрока);					
            ИмяМетода = СоставСтроки[3];
            ДобавляемаяСтрока = СтрЗаменить(
                ПроверяемаяСтрока,
                ИмяМетода,
                Префикс + ИмяМетода
            );
            СоставМетода.Добавить(ДобавляемаяСтрока);
        ИначеЕсли РегЭкспКонецМетода.Совпадает(ПроверяемаяСтрока) Тогда
            СоставМетода.Добавить(ПроверяемаяСтрока);
            Если НашлиВставляемыйБлок Тогда
                ДобавляемаяСтрока = СТрШаблон(
                    "&ИзменениеИКонтроль(""%1"")",
                    ИмяМетода
                );
                СоставСкорректированногоФайла.Добавить(ДобавляемаяСтрока);
                Для Каждого Элемент Из СоставМетода Цикл
                    СоставСкорректированногоФайла.Добавить(Элемент);
                КонецЦикла;
                СоставСкорректированногоФайла.Добавить(Символы.ПС);                    
            КонецЕсли;
            СоставМетода = Новый Массив;
            НашлиМетод = Ложь;
            НашлиВставляемыйБлок = Ложь;
            ИмяМетода = "";
        ИначеЕсли СтрНайти(ПроверяемаяСтрока, НачалоБлокаРежимаРазработки) <> 0 Тогда
            НашлиВставляемыйБлок = Истина;
            ПозицияНачала = СтрНайти(ПроверяемаяСтрока, НачалоБлокаРежимаРазработки);
            СтрокаКода = Лев(ПроверяемаяСтрока, ПозицияНачала - 1) + "#Вставка";
            СоставМетода.Добавить(СтрокаКода);
        ИначеЕсли СтрНайти(ПроверяемаяСтрока, КонецБлокаРежимаРазработки) <> 0 Тогда
            НашлиВставляемыйБлок = Истина;
            ПозицияНачала = СтрНайти(ПроверяемаяСтрока, КонецБлокаРежимаРазработки);
            СтрокаКода = Лев(ПроверяемаяСтрока, ПозицияНачала - 1) + "#КонецВставки";
            СоставМетода.Добавить(СтрокаКода);
        ИначеЕсли НашлиМетод Тогда
            СоставМетода.Добавить(ПроверяемаяСтрока);
        Иначе // BSLLS:EmptyCodeBlock-off
            // пустой блок
        КонецЕсли;
    КонецЦикла;

    ТекстМодуля = СокрЛП(СтрСоединить(
        СоставСкорректированногоФайла, 
        Символы.ПС
    ));
    ТекстовыйДокумент.УстановитьТекст(ТекстМодуля);
    ТекстовыйДокумент.Записать(ПутьКФайлуМодуля);
    Возврат Истина;
КонецФункции

Процедура СкорректироватьОписаниеМодуля(ИдентификаторМодуля, ПутьКФайлуОписания, ПерехваченныеМодули)
    ПроцессорXML = Новый СериализацияДанныхXML(Ложь);
    Описание = ПроцессорXML.ПрочитатьИзФайла(ПутьКФайлуОписания);
    Корень = Описание
        ._Элементы
        .Получить("MetaDataObject")
        ._Элементы
        .Получить("CommonModule")
    ;
    ИсходныйГУИДМодуля = Корень._Атрибуты.Получить("uuid");
    НовыйГУИДМодуля = Строка(Новый УникальныйИдентификатор);
    Корень._Атрибуты.Вставить("uuid", НовыйГУИДМодуля);
    // Корень._Элементы.Вставить("InternalInfo", "");

    Свойства = Корень
        ._Элементы
        .Получить("Properties")
        ._Элементы
    ;
    Свойства.Вставить("ObjectBelonging", "Adopted");
    Свойства.Вставить("ExtendedConfigurationObject", ИсходныйГУИДМодуля);

    ПроцессорXML.ЗаписатьВФайл(Описание, ПутьКФайлуОписания);

    ПерехваченныеМодули.Вставить(ИдентификаторМодуля, ИсходныйГУИДМодуля);
КонецПроцедуры

Процедура СкорректироватьОбъектыОсновнойПодсистемы(КонфигурацияПодсистемы, ОбъектыПоставки)
    // Очищаем список подчиненных подсистем
    Описание = КонфигурацияПодсистемы
        .Получить("MetaDataObject")
        ._Элементы
        .Получить("Subsystem")
        ._Элементы
    ;
    Описание.Вставить("ChildObjects", Неопределено);
    
    // Добавляем объекты
    Описание = КонфигурацияПодсистемы
        .Получить("MetaDataObject")
        ._Элементы
        .Получить("Subsystem")
        ._Элементы
        .Получить("Properties")
    ;

    ОбъектыПоИмени = СортированныеОбъектыПоИмени(ОбъектыПоставки);
    ОбъектыПодсистемы = Новый Массив;
    
    Для Каждого Элемент Из ОбъектыПоИмени Цикл
        Если Элемент = "Subsystem." + ОсновнаяПодсистема Тогда
            Продолжить;
        КонецЕсли;
        ОбъектПоставки = ОбъектыПоставки.Получить(Элемент);
        Если ОбъектПоставки.Тип = "Language" Тогда
            Продолжить;
        КонецЕсли;
        ОбъектПодсистемы = Новый Соответствие;
        ОписаниеОбъекта = Новый Структура;
        ПерехваченныйМодуль = ПерехваченныеМодули.Получить(Элемент);
        Если ПерехваченныйМодуль = Неопределено Тогда
            ОписаниеОбъекта.Вставить("_Значение", Элемент);
        Иначе
            ОписаниеОбъекта.Вставить("_Значение", ПерехваченныйМодуль);
        КонецЕсли;
        
        ОбъектПодсистемы.Вставить("xr:Item", ОписаниеОбъекта);
        ОбъектыПодсистемы.Добавить(ОбъектПодсистемы);
    КонецЦикла;

    Описание.Вставить("Content", ОбъектыПодсистемы);
КонецПроцедуры

Процедура ИзменитьГУИДКонфигурации(Конфигурация)
    Коллекция = Конфигурация
        .Получить("MetaDataObject")
        ._Элементы
        .Получить("Configuration")
    ;
    Атрибуты = Коллекция._Атрибуты;
    Атрибуты.Вставить("uuid", ГУИДРасширения);
КонецПроцедуры

Процедура ДобавитьСвойстваКонфигурации(Конфигурация)
    Коллекция = Конфигурация
        .Получить("MetaDataObject")
        ._Элементы
        .Получить("Configuration")
        ._Элементы
        .Получить("Properties")
    ;
    // Добавляем свойство ObjectBelonging
    Коллекция.Вставить("ObjectBelonging", "Adopted");

    // Исправляем свойство Name
    ИмяСвойства = "Name";
    ИмяКонфигурации = Строка(Коллекция.Получить(ИмяСвойства)) + "Разработка";
    Коллекция.Вставить(ИмяСвойства, ИмяКонфигурации);

    // Добавляем свойство ConfigurationExtensionPurpose
    Коллекция.Вставить("ConfigurationExtensionPurpose", "AddOn");

    // Добавляем свойство KeepMappingToExtendedConfigurationObjectsByIDs
    Коллекция.Вставить("KeepMappingToExtendedConfigurationObjectsByIDs", "true");

    // Исправляем свойство NamePrefix
    Коллекция.Вставить("NamePrefix", Префикс);

    // Исправляем свойство ConfigurationExtensionCompatibilityMode
    РежимСовместимости = Строка(Коллекция.Получить("CompatibilityMode"));
    Коллекция.Вставить("ConfigurationExtensionCompatibilityMode", РежимСовместимости);
КонецПроцедуры

Процедура СкорректироватьОбъектыКонфигурации(Конфигурация, ОбъектыПоставки)
    Коллекция = Конфигурация
        .Получить("MetaDataObject")
        ._Элементы
        .Получить("Configuration")
        ._Элементы
        .Получить("ChildObjects")
    ;
    Коллекция.Очистить();
    ОбъектыПоИмени = СортированныеОбъектыПоИмени(ОбъектыПоставки);
    Для Каждого ИмяОбъекта Из ОбъектыПоИмени Цикл
        ЭлементКоллекции = ОбъектыПоставки.Получить(ИмяОбъекта);
        Объект = Новый Соответствие;
        Объект.Вставить(ЭлементКоллекции.Тип, ЭлементКоллекции.Имя);
        Коллекция.Добавить(Объект);
    КонецЦикла;
КонецПроцедуры

Функция СортированныеОбъектыПоИмени(Объекты)
    Результат = Новый Массив;
    СписокЗначений = Новый СписокЗначений;
    Для Каждого ЭлементКоллекции Из Объекты Цикл
        СписокЗначений.Добавить(ЭлементКоллекции.Ключ);
    КонецЦикла;
    СписокЗначений.СортироватьПоЗначению();
    Результат = СписокЗначений.ВыгрузитьЗначения();
    
    Возврат Результат;
КонецФункции

#КонецОбласти
