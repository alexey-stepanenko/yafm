///////////////////////////////////////////////////////////////////////////////
//
// Служебный модуль с реализацией работы команды
//
///////////////////////////////////////////////////////////////////////////////

#Использовать fs
#Использовать "../../xml-parser/."
#Использовать "ФормированиеРелизов/."

Перем ПрефиксИмениФайлаРелиза; // Наименование проекта. "yafm"
// Перем НомерРелиза;

// Настраивает команду
// 
// Параметры:
//   Команда - Соответствие - Команда
//   Парсер - Модуль - Парсер
//
Процедура НастроитьКоманду(Знач Команда, Знач Парсер) Экспорт
	Парсер.ДобавитьИменованныйПараметрКоманды(Команда, ПараметрКаталогИсходников(), "Путь к каталогу с исходными кодами");
	Парсер.ДобавитьИменованныйПараметрКоманды(Команда, ПараметрКаталогРелизов(), "Путь к каталогу с релизами");
КонецПроцедуры // НастроитьКоманду

// Выполняет логику команды
// 
// Параметры:
//   ПараметрыКоманды - Соответствие - Соответствие ключей командной строки и их значений
//   Приложение - Модуль - Модуль менеджера приложения
//
// Возвращаемое значение:
//   КодУспеха
Функция ВыполнитьКоманду(Знач ПараметрыКоманды, Знач Приложение) Экспорт
	КаталогИсходников = Строка(ПараметрыКоманды.Получить(ПараметрКаталогИсходников()));
	КаталогРелизов = Строка(ПараметрыКоманды.Получить(ПараметрКаталогРелизов()));
	ПроверитьПараметрыКоманды(КаталогИсходников, КаталогРелизов);

	НомерРелиза = СтрЗаменить(НомерРелиза(КаталогИсходников), ".", "_");
	Если ПустаяСтрока(НомерРелиза) Тогда
		ТекстИсключения = "Отсутствует номер версии";

		ВызватьИсключение ТекстИсключения; 
	КонецЕсли;

	КаталогРелиза = ОбъединитьПути(КаталогРелизов, НомерРелиза);
	ФС.ОбеспечитьПустойКаталог(КаталогРелиза);

	ВременныйКаталогИсходников = ОбъединитьПути(КаталогРелиза, "src");
	СформироватьВременныйКаталогИсходников(ВременныйКаталогИсходников, КаталогИсходников);

	КонструкторыРелизов = Новый Массив();
	// Внедрение в конфигурацию
	КонструкторыРелизов.Добавить(Поставка);
	КонструкторыРелизов.Добавить(РасширениеРазработчикаДляПоставки);
	// Расширения
	// КонструкторыРелизов.Добавить(РасширениеПоставки);
	// КонструкторыРелизов.Добавить(РасширениеРазработчикаДляРасширенияПоставки);

	Для Каждого КонструкторРелиза Из КонструкторыРелизов Цикл
		ПараметрыКонструктора = Новый Структура;
		ПараметрыКонструктора.Вставить("НомерРелиза", НомерРелиза);
		ПараметрыКонструктора.Вставить("ПрефиксИмениФайлаРелиза", ПрефиксИмениФайлаРелиза);
		ПараметрыКонструктора.Вставить("ИмяФайлаКонфигурации", ИмяФайлаКонфигурации());
		ПараметрыКонструктора.Вставить("НачалоБлокаРежимаРазработки", "// НАЧАЛО БЛОКА РЕЖИМ РАЗРАБОТКИ");
		ПараметрыКонструктора.Вставить("КонецБлокаРежимаРазработки", "// КОНЕЦ БЛОКА РЕЖИМ РАЗРАБОТКИ");
		КонструкторРелиза.Инициализировать(ПараметрыКонструктора);

		Каталог = ОбъединитьПути(КаталогРелиза, КонструкторРелиза.ИмяРелиза());
		ФС.ОбеспечитьПустойКаталог(Каталог);
   		ФС.КопироватьСодержимоеКаталога(ВременныйКаталогИсходников, Каталог);

		КонструкторРелиза.УстановитьКаталогИсходников(Каталог);

		ОбъектыПоставки = ОбъектыПоставки(
			Каталог, 
			КонструкторРелиза.Подсистемы(), 
			КонструкторРелиза.ИсключаемыеПодсистемы(),
			КонструкторРелиза.ОсновнаяПодсистема()
		);

		КонструкторРелиза.СкорректироватьМодули(ОбъектыПоставки);
		КонструкторРелиза.СкорректироватьФайлОсновнойПодсистемы(ОбъектыПоставки);
		КонструкторРелиза.СкорректироватьФайлКонфигурации(ОбъектыПоставки);
		КонструкторРелиза.ВыполнитьДополнительныеДействия();
		
		ПутьКФайлуПоставки = ОбъединитьПути(
			КаталогРелиза, 
			КонструкторРелиза.ИмяРелиза() + КонструкторРелиза.РасширениеФайлаРелиза()
		);
		КонструкторРелиза.СоздатьФайлПоставки(ПутьКФайлуПоставки);
		
		УдалитьФайлы(Каталог);
	КонецЦикла;
	УдалитьФайлы(ВременныйКаталогИсходников);

	// При успешном выполнении возвращает код успеха
	Возврат Приложение.РезультатыКоманд().Успех;
КонецФункции // ВыполнитьКоманду

///////////////////////////////////////////////////////////////////////////////

Функция ПараметрКаталогИсходников()
	Возврат "-source";
КонецФункции

Функция ПараметрКаталогРелизов()
	Возврат "-releases";
КонецФункции

Функция ТекстИсключения(Ошибки)
	Результат = "";
	Если Ошибки.Количество() = 1 Тогда
		Результат = "Обнаружена ошибка: " + Ошибки[0];
	Иначе
		СоставТекста = Новый Массив;
		СоставТекста.Добавить("Обнаружены ошибки:");
		Для Каждого Ошибка Из Ошибки Цикл
			СоставТекста.Добавить(СтрШаблон("  * %1", Ошибка));
		КонецЦикла;

		Результат = СтрСоединить(СоставТекста, Символы.ПС);
	КонецЕсли;

	Возврат Результат;
КонецФункции

Процедура ПроверитьПараметрыКоманды(КаталогИсходников, КаталогРелизов)
	Ошибки = Новый Массив;
	Если КаталогИсходников = "" Тогда
		Ошибки.Добавить("Не указан каталог исходников");
	КонецЕсли;
	Если КаталогРелизов = "" Тогда
		Ошибки.Добавить("Не указан каталог релизов");
	КонецЕсли;
	Если Ошибки.Количество() > 0 Тогда
		ТекстИсключения = ТекстИсключения(Ошибки);

		ВызватьИсключение ТекстИсключения; 
	КонецЕсли;

	Если Не ФС.КаталогСуществует(КаталогИсходников) Тогда
		Ошибки.Добавить("Каталог исходников не существует");
	КонецЕсли;
	Если Не ФС.КаталогСуществует(КаталогРелизов) Тогда
		Ошибки.Добавить("Каталог релизов не существует");
	КонецЕсли;
	Если Ошибки.Количество() > 0 Тогда
		ТекстИсключения = ТекстИсключения(Ошибки);

		ВызватьИсключение ТекстИсключения; 
	КонецЕсли;
КонецПроцедуры

Функция НомерРелиза(КаталогИсходников)
	Результат = "";
    ПроцессорXML = Новый СериализацияДанныхXML(Ложь);
	ПутьКФайлуКонфигурации = ОбъединитьПути(КаталогИсходников, ИмяФайлаКонфигурации());
	ИсходнаяКонфигурация = ПроцессорXML.ПрочитатьИзФайла(ПутьКФайлуКонфигурации);
	Результат = ИсходнаяКонфигурация
		._Элементы
		.Получить("MetaDataObject")
		._Элементы
		.Получить("Configuration")
		._Элементы
		.Получить("Properties")
		._Элементы
		.Получить("Version")
		._Значение
	;

	Возврат Результат;
КонецФункции

Функция ИмяФайлаКонфигурации()
	Возврат "Configuration.xml";
КонецФункции

Функция ИмяФайлаДампКонфигурации()
	Возврат "ConfigDumpInfo.xml";
КонецФункции

Процедура СформироватьВременныйКаталогИсходников(ВременныйКаталогИсходников, КаталогИсходников)
	ФС.ОбеспечитьПустойКаталог(ВременныйКаталогИсходников);
    ФС.КопироватьСодержимоеКаталога(КаталогИсходников, ВременныйКаталогИсходников);

	// BSLLS:NestedFunctionInParameters-off
	УдалитьФайлы(ОбъединитьПути(
		ВременныйКаталогИсходников,
		ИмяФайлаДампКонфигурации()
	));
	// BSLLS:NestedFunctionInParameters-on

	НайденныеФайлы = НайтиФайлы(ВременныйКаталогИсходников, "*.bsl", Истина);
	Маркеры = Новый Массив;
	Маркеры.Добавить("TODO");
	Маркеры.Добавить("BSLLS:");
	РегулярноеВыражение = РегЭкспПоискСлужебныхКомментариев(Маркеры);
	Для Каждого НайденныйФайл Из НайденныеФайлы Цикл
		УдалитьСлужебныеКомментарииИзТекстовМодулей(НайденныйФайл.ПолноеИмя, РегулярноеВыражение);
	КонецЦикла;

	НайденныеФайлы = НайтиФайлы(ВременныйКаталогИсходников, "*Переопределяемый", Истина);
	Для Каждого НайденныйФайл Из НайденныеФайлы Цикл
		СкорректироватьПереопределяемыйМодуль(НайденныйФайл.ПолноеИмя);
	КонецЦикла;
КонецПроцедуры

Процедура УдалитьСлужебныеКомментарииИзТекстовМодулей(ПолноеИмяФайла, РегулярноеВыражение)
	ИсходныйТекст = Новый ТекстовыйДокумент;
	ИсходныйТекст.Прочитать(ПолноеИмяФайла);
	Если РегулярноеВыражение.Совпадает(ИсходныйТекст.ПолучитьТекст()) Тогда
		ЦелевойТекст = Новый ТекстовыйДокумент;
		Для Сч = 1 По ИсходныйТекст.КоличествоСтрок() Цикл
			ИсходнаяСтрока = ИсходныйТекст.ПолучитьСтроку(Сч);
			Если РегулярноеВыражение.Совпадает(ИсходнаяСтрока) Тогда
				ПозицияКомментария = СтрНайти(ИсходнаяСтрока, "//");
				СтрокаБезКомментария = СокрП(Лев(ИсходнаяСтрока, ПозицияКомментария - 1));
				Если Не ПустаяСтрока(СтрокаБезКомментария) Тогда
					ЦелевойТекст.ДобавитьСтроку(СтрокаБезКомментария);
				КонецЕсли;
			Иначе
				ЦелевойТекст.ДобавитьСтроку(ИсходнаяСтрока);
			КонецЕсли;
		КонецЦикла;
		ЦелевойТекст.Записать(ПолноеИмяФайла);
	КонецЕсли;
КонецПроцедуры

Функция РегЭкспПоискСлужебныхКомментариев(Маркеры)
	ТекстРегулярногоВыражения = СтрШаблон(
		"\/\/[ \t]*(%1)",
		СтрСоединить(Маркеры, "|")
	);

	Результат = Новый РегулярноеВыражение(ТекстРегулярногоВыражения);
	Результат.Многострочный = Истина;
	Возврат Результат;
КонецФункции

Процедура СкорректироватьПереопределяемыйМодуль(Знач ПолноеИмяФайла)
	ПолноеИмяФайла = ОбъединитьПути(ПолноеИмяФайла, "Ext", "Module.bsl");
	Если Не ФС.ФайлСуществует(ПолноеИмяФайла) Тогда
		Возврат;
	КонецЕсли;

	ИсходныйТекст = Новый ТекстовыйДокумент;
	ИсходныйТекст.Прочитать(ПолноеИмяФайла);
	ЦелевойТекст = Новый ТекстовыйДокумент;
	НашлиОбласть = Ложь;

	РегЭкспНачалоОбласти = Новый РегулярноеВыражение("^[ \t]*#Область[ \t]*СлужебныйПрограммныйИнтерфейс");
	РегЭкспНачалоОбласти.ИгнорироватьРегистр = Истина;
	РегЭкспКонецОбласти = Новый РегулярноеВыражение("^[ \t]*#КонецОбласти");
	РегЭкспКонецОбласти.ИгнорироватьРегистр = Истина;
	РегЭкспМетод = Новый РегулярноеВыражение("^[ \t]*((Процедура)|(Функция))[ \t]*([^\(\)]*)(\([^\(\)]*\))[ \t]*Экспорт");
	РегЭкспМетод.ИгнорироватьРегистр = Истина;

	Методы = Новый Массив;
	Для Сч = 1 По ИсходныйТекст.КоличествоСтрок() Цикл
		ИсходнаяСтрока = ИсходныйТекст.ПолучитьСтроку(Сч);

		Если РегЭкспНачалоОбласти.Совпадает(ИсходнаяСтрока) Тогда
			НашлиОбласть = Истина;
		ИначеЕсли
			НашлиОбласть 
			И РегЭкспКонецОбласти.Совпадает(ИсходнаяСтрока)
		Тогда
			Прервать;
		ИначеЕсли 
			НашлиОбласть
			И РегЭкспМетод.Совпадает(ИсходнаяСтрока) 
		Тогда
			СоставСтроки = РегЭкспМетод.Разделить(ИсходнаяСтрока);					
			ВидМетода = СоставСтроки[1];
			ВидМетода = 
				ВРег(Лев(ВидМетода, 1)) 
				+ НРег(Прав(ВидМетода, СтрДлина(ВидМетода) - 1))
			;
			Метод = Новый Структура;
			Метод.Вставить("Вид", ВидМетода);
			Метод.Вставить("Имя", СоставСтроки[3]);
			Метод.Вставить("Параметры", СоставСтроки[4]);
			Если ВидМетода = "Процедура" Тогда
				Метод.Вставить("Завершение", "КонецПроцедуры");
			Иначе
				Метод.Вставить("Завершение", "КонецФункции");
			КонецЕсли;
			Методы.Добавить(Метод);
		Иначе // BSLLS:EmptyCodeBlock-off
			// пустой блок
		КонецЕсли;
	КонецЦикла;

	СоставЦелевогоМодуля = Новый Массив;
	СоставЦелевогоМодуля.Добавить("#Область СлужебныйПрограммныйИнтерфейс");
	Для каждого Метод Из Методы Цикл
		ТекстМетода = СтрШаблон(
			"%1 %2%3 Экспорт
			|
			|%4",
			Метод.Вид,
			Метод.Имя,
			Метод.Параметры,
			Метод.Завершение
		);
		СоставЦелевогоМодуля.Добавить(ТекстМетода);
	КонецЦикла;
	СоставЦелевогоМодуля.Добавить("#КонецОбласти");

	ЦелевойТекст.УстановитьТекст(СтрСоединить(СоставЦелевогоМодуля, Символы.ПС + Символы.ПС));
	
	ЦелевойТекст.Записать(ПолноеИмяФайла);
КонецПроцедуры

#Область ОбъектыПоставки

Функция ОбъектыПоставки(КаталогКонфигурации, ИменаПодсистем, ИменаИсключаемыхПодсистем, ОсновнаяПодсистема)
    Результат = Новый Соответствие;

    Подсистемы = НовыйПодсистемы(ИменаПодсистем);
    ИсключаемыеПодсистемы = НовыйПодсистемы(ИменаИсключаемыхПодсистем);

    Результат = ОбъектыПодсистем(Подсистемы, КаталогКонфигурации);
    ОбъектыИсключаемыхПодсистем = ОбъектыПодсистем(ИсключаемыеПодсистемы, КаталогКонфигурации);

    Для Каждого ОбъектКонфигурации Из ОбъектыИсключаемыхПодсистем Цикл
        Если Результат.Получить(ОбъектКонфигурации.Ключ) = Неопределено Тогда
            Продолжить;
        КонецЕсли;
        Результат.Удалить(ОбъектКонфигурации.Ключ);
    КонецЦикла;

    ДобавитьОбъект(Результат, "Language.Русский");
    ДобавитьОбъект(Результат, "Subsystem." + ОсновнаяПодсистема);

	Возврат Результат;
КонецФункции

Функция НовыйПодсистемы(ИменаПодсистем)
    Результат = Новый Массив;

    ТипПараметра = ТипЗнч(ИменаПодсистем);
    Если ТипПараметра = Тип("Строка") Тогда
        Разделители = ",";
        Результат = СтрРазделить(ИменаПодсистем, Разделители);
    ИначеЕсли ТипПараметра = Тип("Массив") Тогда
        Для Каждого Элемент Из ИменаПодсистем Цикл
            Результат.Добавить(Элемент);
        КонецЦикла;
    Иначе // BSLLS:EmptyCodeBlock-off
        // Пустой блок
    КонецЕсли;

    Возврат Результат;
КонецФункции

Функция ОбъектыПодсистем(Подсистемы, КаталогКонфигурации)
    Результат = Новый Соответствие;

    Для Каждого Подсистема Из Подсистемы Цикл
        СформироватьОбъектыПодсистемы(Результат, Подсистема, КаталогКонфигурации);
    КонецЦикла;

    Возврат Результат;
КонецФункции

Процедура СформироватьОбъектыПодсистемы(ОбъектыПодсистемы, Подсистема, КаталогКонфигурации)
	Если ПустаяСтрока(Подсистема) Тогда
		Возврат;
	КонецЕсли;
	СоставПути = СтрРазделить(Подсистема, ".");
	Если СоставПути.Количество() <> 1 Тогда
		СоставПути.Вставить(СоставПути.Количество() - 1, "Subsystems");
	КонецЕсли;
	СоставПути.Вставить(0, "Subsystems");
	СоставПути.Вставить(0, КаталогКонфигурации);
	ИмяФайлаОписанияПодсистемы = СтрСоединить(СоставПути, ПолучитьРазделительПути()) + ".xml";
    Если Не ФС.ФайлСуществует(ИмяФайлаОписанияПодсистемы) Тогда
        ТекстИсключения = СтрШаблон(
            НСтр("ru='Отсутствует описание подсистемы ""%1""'"),
            Подсистема
        );

        ВызватьИсключение ТекстИсключения;
    КонецЕсли;

    ПроцессорXML = Новый СериализацияДанныхXML(Ложь);
    КонфигурацияПодсистемы = ПроцессорXML.ПрочитатьИзФайла(ИмяФайлаОписанияПодсистемы);
    ОбработатьПодчиненныеПодсистемы(
        ОбъектыПодсистемы, 
        КонфигурацияПодсистемы, 
        Подсистема,
        КаталогКонфигурации
    );
    ОбработатьОбъектыПодсистемы(ОбъектыПодсистемы, КонфигурацияПодсистемы);
КонецПроцедуры

Процедура ОбработатьПодчиненныеПодсистемы(ОбъектыПодсистемы, КонфигурацияПодсистемы, Подсистема, КаталогКонфигурации)
    Описание = КонфигурацияПодсистемы
        ._Элементы
        .Получить("MetaDataObject")
        ._Элементы
        .Получить("Subsystem")
        ._Элементы
        .Получить("ChildObjects")
        ._Элементы
    ;
    ТипЗначенияОписания = ТипЗнч(Описание);
    Если ТипЗначенияОписания = Тип("Массив") Тогда
        Для Каждого Элемент Из Описание Цикл
            ОбработатьПодчиненнуюПодсистему(Элемент, ОбъектыПодсистемы, Подсистема, КаталогКонфигурации);
        КонецЦикла;
    ИначеЕсли ТипЗначенияОписания = Тип("Соответствие") Тогда
        ОбработатьПодчиненнуюПодсистему(Описание, ОбъектыПодсистемы, Подсистема, КаталогКонфигурации);
    Иначе // BSLLS:EmptyCodeBlock-off
        // Пустой блок
    КонецЕсли;
КонецПроцедуры

Процедура ОбработатьПодчиненнуюПодсистему(Элемент, ОбъектыПодсистемы, Подсистема, КаталогКонфигурации)
    Описание = Элемент.Получить("Subsystem");
    Если Описание = Неопределено Тогда
        Возврат;
    КонецЕсли;
    ИмяПодчиненнойПодсистемы = Подсистема + "." + Описание._Значение;
    СформироватьОбъектыПодсистемы(ОбъектыПодсистемы, ИмяПодчиненнойПодсистемы, КаталогКонфигурации);
КонецПроцедуры

Процедура ОбработатьОбъектыПодсистемы(ОбъектыПодсистемы, КонфигурацияПодсистемы)
	Описание = КонфигурацияПодсистемы
        ._Элементы
        .Получить("MetaDataObject")
        ._Элементы
        .Получить("Subsystem")
        ._Элементы
        .Получить("Properties")
        ._Элементы
        .Получить("Content")
        ._Элементы
    ;
    ТипЗначенияОписания = ТипЗнч(Описание);
    Если ТипЗначенияОписания = Тип("Массив") Тогда
        Для Каждого Элемент Из Описание Цикл
            ОбработатьОбъектПодсистемы(Элемент, ОбъектыПодсистемы);
        КонецЦикла;
    ИначеЕсли ТипЗначенияОписания = Тип("Соответствие") Тогда
        ОбработатьОбъектПодсистемы(Описание, ОбъектыПодсистемы);
    Иначе // BSLLS:EmptyCodeBlock-off
        // Пустой блок
    КонецЕсли;
КонецПроцедуры

Процедура ОбработатьОбъектПодсистемы(Элемент, ОбъектыПодсистемы)
    Описание = Элемент.Получить("xr:Item");
    Если ТипЗнч(Описание) <> Тип("Структура") Тогда
        Возврат;
    КонецЕсли;

    ИмяОбъекта = Описание._Значение;
    ДобавитьОбъект(ОбъектыПодсистемы, ИмяОбъекта);
КонецПроцедуры

Процедура ДобавитьОбъект(ОбъектыПодсистемы, ПолноеИмяОбъекта)
	СоставИмени = СтрРазделить(ПолноеИмяОбъекта, ".");
    ТипОбъекта = СоставИмени[0];
    ИмяОбъекта = СоставИмени[1];
    Описание = Новый Структура(
        "Имя, Тип",
        ИмяОбъекта,
        ТипОбъекта
    );

    ОбъектыПодсистемы.Вставить(ПолноеИмяОбъекта, Описание);
КонецПроцедуры

#КонецОбласти

ПрефиксИмениФайлаРелиза = "yafm";