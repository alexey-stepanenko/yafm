///////////////////////////////////////////////////////////////////////////////
//
// Служебный модуль с реализацией работы команды
//
///////////////////////////////////////////////////////////////////////////////

#Использовать fs

Перем Отступ; // Строка отступа элементов html

// Настраивает команду
// 
// Параметры:
//   Команда - Соответствие - Команда
//   Парсер - Модуль - Парсер
//
Процедура НастроитьКоманду(Знач Команда, Знач Парсер) Экспорт
	// BSLLS:LineLength-off
	Парсер.ДобавитьИменованныйПараметрКоманды(Команда, ПараметрФайлИсточник(), "Путь к файлу с исходным макетом");
	Парсер.ДобавитьИменованныйПараметрКоманды(Команда,  ПараметрФайлПриемник(), "Путь к результирующему файлу (раскрашенный макет)");
	Парсер.ДобавитьИменованныйПараметрКоманды(Команда,  ПараметрФайлНастроек(), "Путь к файлу с настройками раскраски");
	// BSLLS:LineLength-on
КонецПроцедуры

// Выполняет логику команды
// 
// Параметры:
//   ПараметрыКоманды - Соответствие - Соответствие ключей командной строки и их значений
//   Приложение - Модуль - Модуль менеджера приложения
//
// Возвращаемое значение:
//   КодУспеха
Функция ВыполнитьКоманду(Знач ПараметрыКоманды, Знач Приложение) Экспорт
	ИмяФайлаМакета = Строка(ПараметрыКоманды.Получить(ПараметрФайлИсточник()));
	ИмяРезультирующегоФайла = Строка(ПараметрыКоманды.Получить(ПараметрФайлПриемник()));
	ИмяФайлаНастроек = Строка(ПараметрыКоманды.Получить(ПараметрФайлНастроек()));

	НастройкиРаскраски = НастройкиРаскраски(ИмяФайлаНастроек);
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ИмяФайлаМакета);

	СоставРезультирующегоФайла = Новый Массив;
	СформироватьСтили(СоставРезультирующегоФайла, НастройкиРаскраски);
	Разделитель = "";
	СоставРезультирующегоФайла.Добавить("<pre>");
	Для Сч = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
		СтрокаШаблона = ТекстовыйДокумент.ПолучитьСтроку(Сч);

		// Если строка является заголовком шаблона
		Если ЭтоСтрокаЗаголовка(Сч, НастройкиРаскраски) Тогда
			СоставСтрокиШаблона = СтрРазделить(СтрокаШаблона, НастройкиРаскраски.Заголовок.Разделитель);
			Если НастройкиРаскраски.Заголовок.Идентификатор.Найти(СоставСтрокиШаблона[0]) = Неопределено Тогда
				ВызватьИсключение "Не найден заголовок шаблона, процесс раскраски прерван";
			КонецЕсли;
			СтилиСтроки = НовыйСтилиСтроки();
			ЗаполнитьСтилиСтроки(СтилиСтроки, НастройкиРаскраски.Заголовок);
			ОбработатьСтроку(
				СоставРезультирующегоФайла, 
				СоставСтрокиШаблона, 
				НастройкиРаскраски.Заголовок.Разделитель,
				СтилиСтроки
			);
			Разделитель = Символ(Число(СоставСтрокиШаблона[2]));

			Продолжить;
		КонецЕсли;

		// Если строка пустая
		Если ПустаяСтрока(СтрокаШаблона) Тогда
			СоставРезультирующегоФайла.Добавить("");

			Продолжить;
		КонецЕсли;

		СоставСтрокиШаблона = СтрРазделить(СтрокаШаблона, Разделитель);

		// Если строка значимая
		Если НастройкиРаскраски.Строки.Идентификаторы.Найти(СоставСтрокиШаблона[0]) <> Неопределено Тогда
			СтилиСтроки = НовыйСтилиСтроки();
			ЗаполнитьСтилиСтроки(СтилиСтроки, НастройкиРаскраски.Строки);
			ОбработатьСтроку(
				СоставРезультирующегоФайла, 
				СоставСтрокиШаблона, 
				Разделитель,
				СтилиСтроки
			);
		Иначе
			СтилиСтроки = НовыйСтилиСтроки();
			СтилиСтроки.Идентификатор = НастройкиРаскраски.Строки.ШрифтКомментария.ИмяСтиля;
			СоставСтрокиШаблона = Новый Массив;
			СоставСтрокиШаблона.Добавить(СтрокаШаблона);
			ОбработатьСтроку(
				СоставРезультирующегоФайла, 
				СоставСтрокиШаблона, 
				Разделитель,
				СтилиСтроки
			);
		КонецЕсли;
	КонецЦикла;
	СоставРезультирующегоФайла.Добавить("</pre>");

	ТекстовыйДокумент.УстановитьТекст(СтрСоединить(
		СоставРезультирующегоФайла,
		Символы.ПС
	));

	ТекстовыйДокумент.Записать(ИмяРезультирующегоФайла);

	// При успешном выполнении возвращает код успеха
	Возврат Приложение.РезультатыКоманд().Успех;
КонецФункции

///////////////////////////////////////////////////////////////////////////////

Функция ПараметрФайлИсточник()
	Возврат "-source";
КонецФункции

Функция ПараметрФайлПриемник()
	Возврат "-destination";
КонецФункции

Функция ПараметрФайлНастроек()
	Возврат "-settings";
КонецФункции

Функция НастройкиРаскраски(ИмяФайлаНастроек)
	Результат = Новый Структура;

	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ИмяФайлаНастроек);
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекстовыйДокумент.ПолучитьТекст());
	Результат = ПрочитатьJSON(ЧтениеJSON, Ложь);

	Возврат Результат;
КонецФункции

Процедура СформироватьСтили(СоставРезультирующегоФайла, НастройкиРаскраски);
	Стили = Новый Соответствие;

	// Стили заголовка макета
	ДобавитьСтиль(Стили, НастройкиРаскраски.Заголовок.ШрифтИдентификатора);
	ДобавитьСтиль(Стили, НастройкиРаскраски.Заголовок.ШрифтРазделителя);
	Для Каждого Элемент Из НастройкиРаскраски.Заголовок.ШрифтыКолонокЗначений Цикл
		ДобавитьСтиль(Стили, Элемент);
	КонецЦикла;

	// Стили строки макета
	ДобавитьСтиль(Стили, НастройкиРаскраски.Строки.ШрифтИдентификатора);
	ДобавитьСтиль(Стили, НастройкиРаскраски.Строки.ШрифтРазделителя);
	ДобавитьСтиль(Стили, НастройкиРаскраски.Строки.ШрифтКомментария);
	Для Каждого Элемент Из НастройкиРаскраски.Строки.ШрифтыКолонокЗначений Цикл
		ДобавитьСтиль(Стили, Элемент);
	КонецЦикла;

	СоставРезультирующегоФайла.Добавить("<style type=""text/css"">");
	Для Каждого Элемент Из Стили Цикл
		СформироватьСтиль(СоставРезультирующегоФайла, Элемент.Значение);
	КонецЦикла;
	СоставРезультирующегоФайла.Добавить("</style>");
	СоставРезультирующегоФайла.Добавить("");
КонецПроцедуры

Процедура ДобавитьСтиль(Стили, ОписаниеСтиля)
	Стили.Вставить(
		ВРег(ОписаниеСтиля.ИмяСтиля),
		ОписаниеСтиля
	);	
КонецПроцедуры

Процедура СформироватьСтиль(СоставРезультирующегоФайла, ОписаниеСтиля)
	СоставРезультирующегоФайла.Добавить(СтрШаблон(
		"%1span.%2 {",
		Отступ,
		ОписаниеСтиля.ИмяСтиля
	));
	СоставРезультирующегоФайла.Добавить(СтрШаблон(
		"%1color: %2;",
		Отступ + Отступ,
		ОписаниеСтиля.Цвет
	));
	СоставРезультирующегоФайла.Добавить(СтрШаблон(
		"%1font-weight: %2;",
		Отступ + Отступ,
		ОписаниеСтиля.Начертание
	));
	СоставРезультирующегоФайла.Добавить(СтрШаблон(
		"%1}",
		Отступ
	));
КонецПроцедуры

Функция ЭтоСтрокаЗаголовка(НомерСтроки, НастройкиРаскраски)
	Результат = (НастройкиРаскраски.Заголовок.НомерСтроки = НомерСтроки);

	Возврат Результат;
КонецФункции

Функция НовыйСтилиСтроки()
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор", Неопределено);
	Результат.Вставить("Разделитель", Неопределено);
	Результат.Вставить("КолонкиЗначений", Новый Массив);

	Возврат Результат;
КонецФункции

Процедура ЗаполнитьСтилиСтроки(СтилиСтроки, НастройкиРаскраски)
	СтилиСтроки.Идентификатор = НастройкиРаскраски.ШрифтИдентификатора.ИмяСтиля;
	СтилиСтроки.Разделитель = НастройкиРаскраски.ШрифтРазделителя.ИмяСтиля;
	Для Каждого Элемент Из НастройкиРаскраски.ШрифтыКолонокЗначений Цикл
		СтилиСтроки.КолонкиЗначений.Добавить(Элемент.ИмяСтиля);
	КонецЦикла;
КонецПроцедуры

Процедура ОбработатьСтроку(СоставРезультирующегоФайла, СоставСтроки, Разделитель, СтилиСтроки)
	СоставРезультирующегоФайла.Добавить(СтрШаблон(
		"%1<nobr>",
		Отступ
	));
	СоставРезультирующегоФайла.Добавить(СтрШаблон(
		"%1<span class=""%2"">%3</span>",
		Отступ + Отступ,
		СтилиСтроки.Идентификатор,
		СоставСтроки[0]
	));
	Для Сч = 1 По СоставСтроки.Количество() - 1 Цикл
		СоставРезультирующегоФайла.Добавить(СтрШаблон(
			"%1<span class=""%2"">%3</span>",
			Отступ + Отступ,
			СтилиСтроки.Разделитель,
			Разделитель
		));
		Если Сч > СтилиСтроки.КолонкиЗначений.Количество() Тогда
			Стиль = СтилиСтроки.КолонкиЗначений[СтилиСтроки.КолонкиЗначений.Количество() - 1];
		Иначе
			Стиль = СтилиСтроки.КолонкиЗначений[Сч - 1];
		КонецЕсли;
		СоставРезультирующегоФайла.Добавить(СтрШаблон(
			"%1<span class=""%2"">%3</span>",
			Отступ + Отступ,
			Стиль,
			СоставСтроки[Сч]
		));
	КонецЦикла;
	СоставРезультирующегоФайла.Добавить(СтрШаблон(
		"%1</nobr>",
		Отступ
	));
КонецПроцедуры

Функция СтрокаТекста(СтрокаШаблона, Стиль)
	Результат = СтрШаблон(
		"%1<span class=""%2"">%3</span>",
		Отступ + Отступ,
		Стиль,
		СтрокаШаблона
	);

	Возврат Результат;
КонецФункции

Процедура ОбработатьСтроки(СоставРезультирующегоФайла, Знач Строки)
	ТипЗначенияСтроки = ТипЗнч(Строки);
	Если ТипЗначенияСтроки = Тип("Строка") Тогда
		СтрокаТекста = Строки;
		Строки = Новый Массив;
		Строки.Добавить(СтрокаТекста);
	КонецЕсли;

	СоставРезультирующегоФайла.Добавить(СтрШаблон(
		"%1<nobr>",
		Отступ
	));

	Для Каждого Элемент Из Строки Цикл
		СоставРезультирующегоФайла.Добавить(СтрШаблон(
			"%1%2",
			Отступ + Отступ,
			Элемент
		));
	КонецЦикла;

	СоставРезультирующегоФайла.Добавить(СтрШаблон(
		"%1</nobr>",
		Отступ
	));
КонецПроцедуры

Отступ = "  ";