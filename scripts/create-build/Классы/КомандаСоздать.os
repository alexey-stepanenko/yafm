#Использовать fs
#Использовать v8runner

Процедура НастроитьКоманду(Знач Команда, Знач Парсер) Экспорт
	// BSLLS:LineLength-off
	Парсер.ДобавитьИменованныйПараметрКоманды(Команда, ПараметрПутьКИнформационнойБазе(), "Путь к информационной базе");
	Парсер.ДобавитьИменованныйПараметрКоманды(Команда, ПараметрПользовательИнформационойБазы(), "Пользователь информационной базы");
	Парсер.ДобавитьИменованныйПараметрКоманды(Команда, ПараметрПарольПользователяИнформационойБазы(), "Пароль пользователя информационной базы");
	Парсер.ДобавитьИменованныйПараметрКоманды(Команда, ПараметрКаталогИсходников(), "Путь к каталогу с исходными кодами");
	// BSLLS:LineLength-on	
КонецПроцедуры // НастроитьКоманду

Функция ВыполнитьКоманду(Знач ПараметрыКоманды, Знач Приложение) Экспорт
	ИмяФайлаДампа = "ConfigDumpInfo.xml";
	ИмяФайлаКонфигурация = "Configuration.xml";
	ПутьКИнформационнойБазе = ЗначениеПараметра(ПараметрыКоманды, ПараметрПутьКИнформационнойБазе());
	ПользовательИнформационойБазы = ЗначениеПараметра(ПараметрыКоманды, ПараметрПользовательИнформационойБазы());
	ПарольПользователяИнформационойБазы = ЗначениеПараметра(ПараметрыКоманды, ПараметрПарольПользователяИнформационойБазы()); // BSLLS:LineLength-off
	КаталогИсходников = ЗначениеПараметра(ПараметрыКоманды, ПараметрКаталогИсходников());
	Если ПустаяСтрока(ПользовательИнформационойБазы) Тогда
		ПарольПользователяИнформационойБазы = "";
	КонецЕсли;

	ФС.ОбеспечитьПустойКаталог(КаталогИсходников);
	СтрокаСоединения = СтрШаблон(
		"/IBConnectionString""%1""",
		СтрЗаменить(ПутьКИнформационнойБазе, """", """""")
	);

	// 1. Выгружаем кнфигурацию в исходные коды
	Конфигуратор = Новый УправлениеКонфигуратором();
	Конфигуратор.УстановитьКонтекст(СтрокаСоединения, ПользовательИнформационойБазы, ПарольПользователяИнформационойБазы);
	Конфигуратор.ВыгрузитьКонфигурациюВФайлы(КаталогИсходников);

	// 2. Удаляем ConfigDumpInfo.xml
	ФС.УдалитьФайлы(ОбъединитьПути(КаталогИсходников, ИмяФайлаДампа));

	// 3. Получить исходную версию
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ОбъединитьПути(КаталогИсходников, ИмяФайлаКонфигурация));
	РегЭкспВерсия = Новый РегулярноеВыражение("^([ \t]*)<Version>(.*)</version>[ \t]*$");
	ИсходнаяВерсия = "";
	ИсходнаяСтрока = "";
	Отступ = "";
	Для Сч = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
		ИсходнаяСтрока = ТекстовыйДокумент.ПолучитьСтроку(Сч);
		Если РегЭкспВерсия.Совпадает(ИсходнаяСтрока) Тогда
			СоставСтроки = РегЭкспВерсия.Разделить(ИсходнаяСтрока);
			Отступ = СоставСтроки[1];
			ИсходнаяВерсия = СоставСтроки[2];
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если ПустаяСтрока(ИсходнаяВерсия) Тогда
		Возврат Приложение.РезультатыКоманд().ОшибкаВремениВыполнения;
	КонецЕсли;

	// 4. Увеличиваем версию билда
	СоставВерсии = СтрРазделить(ИсходнаяВерсия, ".");
	ПозицияБилда = СоставВерсии.Количество() - 1;
	ТипЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0));
	Билд = ТипЧисло.ПривестиЗначение(СоставВерсии[ПозицияБилда]);
	СоставВерсии[ПозицияБилда] = Формат(Билд + 1, "ЧГ=");
	НоваяВерсия = СтрСоединить(СоставВерсии, ".");

	// 5. Сохраняем новую версию билда
	Конфигурация = ТекстовыйДокумент.ПолучитьТекст();
	Конфигурация = СтрЗаменить(Конфигурация, ИсходнаяСтрока, Отступ + "<Version>" + НоваяВерсия + "</Version>");
	ТекстовыйДокумент.УстановитьТекст(Конфигурация);
	ТекстовыйДокумент.Записать(ОбъединитьПути(КаталогИсходников, ИмяФайлаКонфигурация));

	Модули = Новый Массив;
	Модули.Добавить("CommonModules,МФСлужебный,Ext,Module.bsl");
	Для Каждого Модуль Из Модули Цикл
		СоставПутиКФайлуМодуля = СтрРазделить(Модуль, ",");
		СоставПутиКФайлуМодуля.Вставить(0, КаталогИсходников);
		ПутьКФайлуМодуля = СтрСоединить(СоставПутиКФайлуМодуля, ПолучитьРазделительПути());
		ТекстовыйДокумент.Прочитать(ПутьКФайлуМодуля);
		ТекстМодуля = ТекстовыйДокумент.ПолучитьТекст();
		ТекстМодуля = СтрЗаменить(
			ТекстМодуля,
			"Возврат """ + ИсходнаяВерсия + """;",
			"Возврат """ + НоваяВерсия + """;"
		);
		ТекстовыйДокумент.УстановитьТекст(ТекстМодуля);
		ТекстовыйДокумент.Записать(ПутьКФайлуМодуля);
	КонецЦикла;

	// 6. Загружаем исходники в информационную базу
	Конфигуратор.ЗагрузитьКонфигурациюИзФайлов(КаталогИсходников);

	// При успешном выполнении возвращает код успеха
	Возврат Приложение.РезультатыКоманд().Успех;
КонецФункции // ВыполнитьКоманду

///////////////////////////////////////////////////////////////////////////////

Функция ПараметрПутьКИнформационнойБазе()
	Возврат "-infobase";
КонецФункции

Функция ПараметрПользовательИнформационойБазы()
	Возврат "-infobase-user";
КонецФункции

Функция ПараметрПарольПользователяИнформационойБазы()
	Возврат "-infobase-user-password";
КонецФункции

Функция ПараметрКаталогИсходников()
	Возврат "-src";
КонецФункции

Функция ТекстИсключения(Ошибки)
	Результат = "";
	Если Ошибки.Количество() = 1 Тогда
		Результат = "Обнаружена ошибка: " + Ошибки[0];
	Иначе
		СоставТекста = Новый Массив;
		СоставТекста.Добавить("Обнаружены ошибки:");
		Для Каждого Ошибка Из Ошибки Цикл
			СоставТекста.Добавить(СтрШаблон("  * %1", Ошибка));
		КонецЦикла;

		Результат = СтрСоединить(СоставТекста, Символы.ПС);
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция ЗначениеПараметра(Параметры, ИмяПараметра, ЗначениеПоУмолчанию = "")
	Результат = Параметры.Получить(ИмяПараметра);
	Если Результат = Неопределено Тогда
		Результат = ЗначениеПоУмолчанию;
	КонецЕсли;

	Возврат Результат;
КонецФункции