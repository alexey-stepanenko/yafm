//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2025 Alexey A. Stepanenko 
//    * alexey.stepanenko@gmail.com
//    * TG: @AlexeyStepanenko
//    * https://github.com/alexey-stepanenko
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОбновитьИменаМакетовНаСервере();
	Версия = МФСлужебный.Версия();
	СформироватьДеревоФорм();
	СформироватьШаблоны();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПолноеИмяФормыНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ДеревоФорм", ДеревоФормКонфигурации);
	
	// BSLLS:NestedFunctionInParameters-off
	ОткрытьФорму(
		"Обработка.МФРаботаСМакетом.Форма.ФормаПодбора", 
		ПараметрыПодбора, 
		ЭтаФорма, 
		ЭтаФорма, 
		, 
		, 
		Новый ОписаниеОповещения("ПослеВыбораФормыДляМодификации", ЭтаФорма), 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	// BSLLS:NestedFunctionInParameters-on
КонецПроцедуры

&НаКлиенте
Процедура ИмяМакетаОписанияМодификацийПриИзменении(Элемент)
	ПрочитатьМакет(Команды.Найти(НСтр("ru='ПрочитатьМакет'")));
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьМодифицируемуюФорму(Команда)
	Если Не ПустаяСтрока(МакетОписанияМодификации) Тогда
		ОбновитьМакетОписанияМодификаций(
			ИмяМакетаОписанияМодификаций,
			МакетОписанияМодификации
		);
	КонецЕсли;
	ОткрытьФорму(ПолноеИмяФормы);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИменаМакетов(Команда)
	ОбновитьИменаМакетовНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьМакет(Команда)
	ПрочитатьМакетНаСервере();
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура НовыйМакет(Команда)
	Если Не ПустаяСтрока(МакетОписанияМодификации) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаОбОчисткеМакета", ЭтаФорма);
		ПоказатьВопрос(
			ОписаниеОповещения,
			НСтр("ru='Текущий макет не пустой. Очистить?'"),
			РежимДиалогаВопрос.ДаНет,
			30,
			КодВозвратаДиалога.Нет,
			НСтр("ru='Очистка макета'"),
			КодВозвратаДиалога.Нет
		);
	Иначе
		ПродолжитьСозданиеНовогоМакета();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВставитьШаблон(Команда)
	Если Не Шаблоны.Свойство(Команда.Имя) Тогда
		Возврат;
	КонецЕсли;
	
	Шаблон = СтрЗаменить(
		Шаблоны[Команда.Имя],
		Символы.Таб,
		СимволРазделитель
	);
	
	МакетОписанияМодификации = СокрЛП(
		МакетОписанияМодификации
		+ Символы.ПС
		+ Шаблон
		+ Символы.ПС
	);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьВидимостьДоступностьЭлементов()
	Элементы.ОткрытьМодифицируемуюФорму.Доступность = (ПолноеИмяФормы <> "");
	Элементы.ПрочитатьМакет.Доступность = (СокрЛП(ИмяМакетаОписанияМодификаций) <> "");
	Для Каждого ЭлементФормы Из Элементы.ГруппаШаблоны.ПодчиненныеЭлементы Цикл
		ЭлементФормы.Доступность = Булево(КодСимволаРазделителя);
	КонецЦикла;
КонецПроцедуры

#Область ДеревоФорм

&НаСервере
Процедура СформироватьДеревоФорм()
	ДеревоФорм = РеквизитФормыВЗначение("ДеревоФормКонфигурации");
	
	СформироватьВеткуОбщихФорм(ДеревоФорм);
	// BSLLS:LineLength-off
	СформироватьВеткуКоллекцииМетаданных(ДеревоФорм, "Справочники", "Справочники", "Справочник", БиблиотекаКартинок.Справочник);
	СформироватьВеткуКоллекцииМетаданных(ДеревоФорм, "Документы", "Документы", "Документ", БиблиотекаКартинок.Документ);
	СформироватьВеткуКоллекцииМетаданных(ДеревоФорм, "Журналы документов", "ЖурналыДокументов", "ЖурналДокументов", БиблиотекаКартинок.ЖурналДокументов);
	СформироватьВеткуКоллекцииМетаданных(ДеревоФорм, "Перечисления", "Перечисления", "Перечисление", БиблиотекаКартинок.Перечисление);
	СформироватьВеткуКоллекцииМетаданных(ДеревоФорм, "Отчеты", "Отчеты", "Отчет", БиблиотекаКартинок.Отчет);
	СформироватьВеткуКоллекцииМетаданных(ДеревоФорм, "Обработки", "Обработки", "Обработка", БиблиотекаКартинок.Обработка);
	СформироватьВеткуКоллекцииМетаданных(ДеревоФорм, "Планы видов характеристик", "ПланыВидовХарактеристик", "ПланВидовХарактеристик", БиблиотекаКартинок.ПланВидовХарактеристик);
	СформироватьВеткуКоллекцииМетаданных(ДеревоФорм, "Планы счетов", "ПланыСчетов", "ПланСчетов", БиблиотекаКартинок.ПланСчетов);
	СформироватьВеткуКоллекцииМетаданных(ДеревоФорм, "Планы видов расчета", "ПланыВидовРасчета", "ПланВидовРасчета", БиблиотекаКартинок.ПланВидовРасчета);
	СформироватьВеткуКоллекцииМетаданных(ДеревоФорм, "Регистры сведений", "РегистрыСведений", "РегистрСведений", БиблиотекаКартинок.РегистрСведений);
	СформироватьВеткуКоллекцииМетаданных(ДеревоФорм, "Регистры накопления", "РегистрыНакопления", "РегистрНакопления", БиблиотекаКартинок.РегистрНакопления);
	СформироватьВеткуКоллекцииМетаданных(ДеревоФорм, "Регистры бухгалтерии", "РегистрыБухгалтерии", "РегистрБухгалтерии", БиблиотекаКартинок.РегистрБухгалтерии);
	СформироватьВеткуКоллекцииМетаданных(ДеревоФорм, "Регистры расчета", "РегистрыРасчета", "РегистрРасчета", БиблиотекаКартинок.РегистрРасчета);
	СформироватьВеткуКоллекцииМетаданных(ДеревоФорм, "Бизнес-процессы", "БизнесПроцессы", "БизнесПроцесс", БиблиотекаКартинок.БизнесПроцесс);
	СформироватьВеткуКоллекцииМетаданных(ДеревоФорм, "Задачи", "Задачи", "Задача", БиблиотекаКартинок.Задача);
	// BSLLS:LineLength-on
	
	ЗначениеВРеквизитФормы(ДеревоФорм, "ДеревоФормКонфигурации");
КонецПроцедуры

&НаСервере
Процедура СформироватьВеткуОбщихФорм(Родитель)
	КартинкаОбщие = Новый Картинка(Обработки.МФРаботаСМакетом.ПолучитьМакет("КартинкаМетаданныеОбщие"));
	Строки = Родитель.Строки;
	
	СтрокаОбщие = Строки.Добавить();
	СтрокаОбщие.Имя = "Общие";
	СтрокаОбщие.Картинка = КартинкаОбщие;
	СтрокаОбщие.ВеткаСформирована = Истина;
	
	СтрокаОбщиеФормы = СтрокаОбщие.Строки.Добавить();
	СтрокаОбщиеФормы.Имя = "Общие формы";
	СтрокаОбщиеФормы.Картинка = БиблиотекаКартинок.Форма;
	Если Метаданные.ОбщиеФормы.Количество() = 0 Тогда
		СтрокаОбщиеФормы.ВеткаСформирована = Истина;
	Иначе
		СтрокаОбщиеФормы.ИмяКоллекции = "ОбщиеФормы";
		ФейковаяСтрока = СтрокаОбщиеФормы.Строки.Добавить();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СформироватьВеткуКоллекцииМетаданных(Родитель, ИмяВетки, ИмяКоллекции, ИмяОбъекта, Картинка)
	Строки = Родитель.Строки;
	НоваяСтрока = Строки.Добавить();
	НоваяСтрока.Имя = ИмяВетки;
	НоваяСтрока.Картинка = Картинка;
	Если Метаданные[ИмяКоллекции].Количество() = 0 Тогда
		НоваяСтрока.ВеткаСформирована = Истина;
	Иначе
		НоваяСтрока.ИмяКоллекции = ИмяКоллекции;
		ФейковаяСтрока = НоваяСтрока.Строки.Добавить();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПослеВыбораФормыДляМодификации(РезультатЗакрытия, ДополнительныеПараметры) Экспорт 
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяФормы = РезультатЗакрытия.ВыбраннаяФорма;
	ДеревоФормКонфигурации.ПолучитьЭлементы().Очистить();
	МФИнструментыРазработчикаКлиент.ЗаполнитьВетки(
		ДеревоФормКонфигурации, 
		РезультатЗакрытия.ДеревоФормКонфигурации
	);
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаСервере
Процедура ОбновитьИменаМакетовНаСервере()
	Элементы.ИмяМакетаОписанияМодификаций.СписокВыбора.Очистить();
	ИменаМакетов = РегистрыСведений.МФМакеты.ИменаМакетов();
	Для Каждого Элемент Из ИменаМакетов Цикл
		Элементы.ИмяМакетаОписанияМодификаций.СписокВыбора.Добавить(Элемент);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПрочитатьМакетНаСервере()
	Макет = РегистрыСведений.МФМакеты.МакетОписанияМодификаций(ИмяМакетаОписанияМодификаций);
	Если ПустаяСтрока(Макет.ПолучитьТекст()) Тогда
		Макет = МФСлужебный.МакетОписанияМодификаций(ИмяМакетаОписанияМодификаций);
	КонецЕсли;
	
	МакетОписанияМодификации = Макет.ПолучитьТекст();
	Протокол = МФСлужебный.Протокол(Неопределено);
	ОписаниеМодификаций = МФСлужебный.ОписаниеМодификаций(ИмяМакетаОписанияМодификаций, Протокол);
	СимволРазделитель = ОписаниеМодификаций.РазделительПолей;
	КодСимволаРазделителя = КодСимвола(СимволРазделитель);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьМакетОписанияМодификаций(ИмяМакетаОписанияМодификаций, ТекстМакетаОписанияМодификации)
	РегистрыСведений.МФМакеты.ОбновитьМакетОписанияМодификаций(
		ИмяМакетаОписанияМодификаций,
		ТекстМакетаОписанияМодификации
	);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОбОчисткеМакета(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПродолжитьСозданиеНовогоМакета();
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьСозданиеНовогоМакета()
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеЗакрытияФормыСозданияНовогоМакета", ЭтаФорма);
	ОткрытьФорму(
		"Обработка.МФРаботаСМакетом.Форма.СозданиеНовогоМакета",
		, , , , ,
		ОповещениеОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыСозданияНовогоМакета(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	КодСимволаРазделителя = РезультатЗакрытия.КодСимволаРазделителя;
	СимволРазделитель = РезультатЗакрытия.СимволРазделитель;
	МакетОписанияМодификации = ЗаголовокМакета();
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Функция ЗаголовокМакета()
	Результат = СтрШаблон(
		"МОДИФИКАЦИЯФОРМ %1 %2",
		Версия,
		Формат(КодСимволаРазделителя, "ЧГ=")
	) + Символы.ПС;
	
	Возврат Результат;
КонецФункции

#Область Шаблоны

&НаСервере
Процедура СформироватьШаблоны()
	Шаблоны = Новый Структура;
	Макет = Обработки.МФРаботаСМакетом.ПолучитьМакет("Шаблоны");
	ИмяШаблона = "";
	СоставШаблона = Новый Массив;
	Для Сч = 1 По Макет.КоличествоСтрок() Цикл
		СтрокаШаблона = Макет.ПолучитьСтроку(Сч);
		Если Лев(СтрокаШаблона, 1) = "#" Тогда
			ЗапомнитьШаблон(ИмяШаблона, СоставШаблона);
			ИмяШаблона = Прав(СтрокаШаблона, СтрДлина(СтрокаШаблона) - 1);
			СоставШаблона.Очистить();
		ИначеЕсли
			Не ПустаяСтрока(СтрокаШаблона)
			И Не ПустаяСтрока(ИмяШаблона)
		Тогда
			СоставШаблона.Добавить(СтрокаШаблона);
		Иначе
			// Пустой блок
		КонецЕсли;
	КонецЦикла;
	Если СоставШаблона.Количество() > 0 Тогда
		ЗапомнитьШаблон(ИмяШаблона, СоставШаблона);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗапомнитьШаблон(ИмяШаблона, СоставШаблона)
	Если
		ПустаяСтрока(ИмяШаблона)
		Или СоставШаблона.Количество() = 0
	Тогда
		Возврат;
	КонецЕсли;
	
	ТекстШаблона = СтрСоединить(СоставШаблона, Символы.ПС);
	Шаблоны.Вставить(ИмяШаблона, ТекстШаблона);
КонецПроцедуры

#КонецОбласти

#КонецОбласти
