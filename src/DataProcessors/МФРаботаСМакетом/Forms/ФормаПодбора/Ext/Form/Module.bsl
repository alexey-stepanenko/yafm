//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2025 Alexey A. Stepanenko 
//    * alexey.stepanenko@gmail.com
//    * TG: @AlexeyStepanenko
//    * https://github.com/alexey-stepanenko
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ИдентификаторСтрокиВыбраннойФормы = -1;
	МФИнструментыРазработчикаКлиентСервер.ЗаполнитьВетки(
		ДеревоФормКонфигурации, 
		Параметры.ДеревоФорм
	);
	Если ПустаяСтрока(Параметры.ВыбраннаяФорма) Тогда
		Возврат;
	КонецЕсли;
	ИдентификаторСтрокиВыбраннойФормы = ИдентификаторСтрокиВыбраннойФормы(
		Параметры.ВыбраннаяФорма,
		ДеревоФормКонфигурации.ПолучитьЭлементы()
	);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ИдентификаторСтрокиВыбраннойФормы >= 0 Тогда
		Элементы.ДеревоФормКонфигурации.ТекущаяСтрока = ИдентификаторСтрокиВыбраннойФормы;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ДеревоФормКонфигурации

&НаКлиенте
Процедура ДеревоФормКонфигурацииПриАктивизацииСтроки(Элемент)
	Элементы.ФормаВыбратьФорму.Доступность = (Элементы.ДеревоФормКонфигурации.ТекущиеДанные.ИмяЭлемента <> "");
КонецПроцедуры

&НаКлиенте
Процедура ДеревоФормКонфигурацииПередРазворачиванием(Элемент, Строка, Отказ)
	РазворачиваемаяВетка = ДеревоФормКонфигурации.НайтиПоИдентификатору(Строка);
	Если РазворачиваемаяВетка.ВеткаСформирована Тогда
		Возврат;
	КонецЕсли;
	Если РазворачиваемаяВетка.ИмяКоллекции = "" Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	ОписанияВеток = ОписанияВеток(РазворачиваемаяВетка.ИмяКоллекции, РазворачиваемаяВетка.Картинка);
	РазворачиваемаяВетка.ВеткаСформирована = Истина;
	Если ОписанияВеток.Количество() > 0 Тогда
		СтрокиВетки = РазворачиваемаяВетка.ПолучитьЭлементы();
		СтрокиВетки.Очистить();
		Для Каждого ОписаниеВетки Из ОписанияВеток Цикл
			НоваяВетка = СтрокиВетки.Добавить();
			НоваяВетка.Имя = ОписаниеВетки.Ключ;
			НоваяВетка.Картинка = ОписаниеВетки.Значение.КартинкаВетки;
			НоваяВетка.ИмяЭлемента = ОписаниеВетки.Значение.ИмяЭлемента;
			НоваяВетка.ИмяКоллекции = СтрШаблон(
				"%1.%2.Формы",
				РазворачиваемаяВетка.ИмяКоллекции,
				ОписаниеВетки.Ключ
			);
			Если ОписаниеВетки.Значение.КоличествоПодчиненных = 0 Тогда
				НоваяВетка.ВеткаСформирована = Истина;
			Иначе
				ФейковаяВетка = НоваяВетка.ПолучитьЭлементы().Добавить();
			КонецЕсли;
		КонецЦикла;
	Иначе
		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьФорму(Команда)
	ПараметрыЗакрытия = Новый Структура;
	ПараметрыЗакрытия.Вставить("ВыбраннаяФорма", Элементы.ДеревоФормКонфигурации.ТекущиеДанные.ИмяЭлемента);
	ПараметрыЗакрытия.Вставить("ДеревоФормКонфигурации", ДеревоФормКонфигурации);
	
	ЭтаФорма.Закрыть(ПараметрыЗакрытия);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// TODO 2025-03-12: bug Когда передается имя формы, которая еще не открывалась, то идентфиикатор
// не определяется, т.к. ветка еще не сформирована.

&НаСервере
Функция ИдентификаторСтрокиВыбраннойФормы(ИмяВыбраннойФормы, КоллекцияСтрок)
	Результат = Неопределено;
	
	Для Каждого СтрокаДерева Из КоллекцияСтрок Цикл
		Если СтрокаДерева.ИмяЭлемента = ИмяВыбраннойФормы Тогда
			Результат = СтрокаДерева.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
		
		Если СтрокаДерева.ВеткаСформирована Тогда
			Коллекция = СтрокаДерева.ПолучитьЭлементы();
			Результат = ИдентификаторСтрокиВыбраннойФормы(ИмяВыбраннойФормы, Коллекция);
		КонецЕсли;
		
		Если Результат <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции


&НаСервере
Функция ОписанияВеток(ИмяКоллекцииМетаданных, Картинка)
	Результат = Новый Структура;
	Если ИмяКоллекцииМетаданных = "ОбщиеФормы" Тогда
		ЕстьПодчиненнаяКоллекция = Ложь;
	Иначе
		ЕстьПодчиненнаяКоллекция = Не Булево(СтрНайти(ИмяКоллекцииМетаданных, "."));
	КонецЕсли;
	
	Коллекция = КоллекцияПоИмени(ИмяКоллекцииМетаданных);
	Для Каждого ЭлементКоллекции Из Коллекция Цикл
		ОписаниеВетки = Новый Структура;
		Если ЕстьПодчиненнаяКоллекция Тогда
			КоличествоПодчиненных = ЭлементКоллекции.Формы.Количество();
			КартинкаВетки = Картинка;
			ИмяЭлемента = "";
		Иначе
			КоличествоПодчиненных = 0;
			КартинкаВетки = БиблиотекаКартинок.Форма;
			ИмяЭлемента = ЭлементКоллекции.ПолноеИмя();
		КонецЕсли;
		ОписаниеВетки.Вставить("КоличествоПодчиненных", КоличествоПодчиненных);
		ОписаниеВетки.Вставить("КартинкаВетки", КартинкаВетки);
		ОписаниеВетки.Вставить("ИмяЭлемента", ИмяЭлемента);
		
		Результат.Вставить(ЭлементКоллекции.Имя, ОписаниеВетки);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция КоллекцияПоИмени(ИмяКоллекцииМетаданных)
	СоставИмени = СтрРазделить(ИмяКоллекцииМетаданных, ".");
	Результат = Метаданные[СоставИмени[0]];
	
	Для Сч = 1 По СоставИмени.Количество() - 1 Цикл
		Результат = Результат[СоставИмени[Сч]];
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

#КонецОбласти
