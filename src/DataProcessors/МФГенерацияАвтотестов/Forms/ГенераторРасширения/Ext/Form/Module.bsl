//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2025 Alexey A. Stepanenko 
//    * alexey.stepanenko@gmail.com
//    * TG: @AlexeyStepanenko
//    * https://github.com/alexey-stepanenko
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область ОписаниеПеременных

&НаКлиенте
Перем ПутьКФайлуЗапуска1С;

&НаКлиенте
Перем ВидИнформационнойБазы;

&НаКлиенте
Перем СтрокаСоединенияКСуществующейИБ;

&НаКлиенте
Перем ПользовательСуществующейИБ;

&НаКлиенте
Перем ПарольПользователяСуществующейИБ;

&НаКлиенте
Перем ПутьКВременнойФайловойИБ;

&НаКлиенте
Перем ИмяРасширения;

&НаКлиенте
Перем СтрокаСоединения;

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

&НаКлиенте
Функция НовыйПараметрыИнициализации() Экспорт
	Результат = Новый Структура;
	
	ИменаПараметров = СтрРазделить(ИменаПараметровГенерацииРасширения, ",");
	Для Каждого ИмяПараметра Из ИменаПараметров Цикл
		Результат.Вставить(ИмяПараметра, Неопределено);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура Инициализировать(ПараметрыИнициализации) Экспорт
	ПутьКФайлуЗапуска1С = ЗначениеПараметраИнициализации(ПараметрыИнициализации, "ПутьКФайлуЗапуска1С");
	ВидИнформационнойБазы = ЗначениеПараметраИнициализации(ПараметрыИнициализации, "ВидИнформационнойБазы");
	СтрокаСоединенияКСуществующейИБ = ЗначениеПараметраИнициализации(ПараметрыИнициализации, "СтрокаСоединенияКСуществующейИБ");
	ПользовательСуществующейИБ = ЗначениеПараметраИнициализации(ПараметрыИнициализации, "ПользовательСуществующейИБ");
	ПарольПользователяСуществующейИБ = ЗначениеПараметраИнициализации(ПараметрыИнициализации, "ПарольПользователяСуществующейИБ");
	ПутьКВременнойФайловойИБ = ЗначениеПараметраИнициализации(ПараметрыИнициализации, "ПутьКВременнойФайловойИБ");
	ИмяРасширения = ЗначениеПараметраИнициализации(ПараметрыИнициализации, "ИмяРасширения", "");
КонецПроцедуры

&НаКлиенте
Асинх Функция ПроверитьВозможностьИспользования() Экспорт
	Ждать Подготовить();
	Ждать Освободить();
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ИменаПараметровГенерацииРасширения = Обработки.МФГенерацияАвтотестов.ИменаПараметровГенерацииРасширения();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Инициализировать

&НаКлиенте
Функция ЗначениеПараметраИнициализации(ПараметрыИнициализации, ИмяПараметра, ЗначениеПоУмолчанию = Неопределено)
	Результат = ЗначениеПоУмолчанию;
	
	Если ПараметрыИнициализации.Свойство(ИмяПараметра) Тогда
		Результат = ПараметрыИнициализации[ИмяПараметра];
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

&НаКлиенте
Асинх Функция Подготовить()
	Если ВидИнформационнойБазы = 0 Тогда
		Ждать ПодготовитьВременнуюИнформационнуюБазу();
	Иначе
		Ждать ПодготовитьСуществующуюИнформационнуюБазу();
	КонецЕсли;
КонецФункции

&НаКлиенте
Асинх Функция ПодготовитьВременнуюИнформационнуюБазу()
	Если ПустаяСтрока(ПутьКВременнойФайловойИБ) Тогда
		ПутьКВременнойФайловойИБ = ПолучитьИмяВременногоФайла();
	КонецЕсли;
	Ждать УдалитьФайлыАсинх(ПутьКВременнойФайловойИБ);
	Ждать СоздатьКаталогАсинх(ПутьКВременнойФайловойИБ);
	
	СоставСтрокиЗапуска = Новый Массив;
	СоставСтрокиЗапуска.Добавить("""" + ПутьКФайлуЗапуска1С + """");
	СоставСтрокиЗапуска.Добавить("CREATEINFOBASE");
	СтрокаСоединенияКИБ = СтрШаблон("File=""%1""", ПутьКВременнойФайловойИБ);
	СоставСтрокиЗапуска.Добавить(СтрокаСоединенияКИБ);
	ИмяФайлаОтветаКонфигуратора = ПолучитьИмяВременногоФайла();
	СоставСтрокиЗапуска.Добавить("/Out " + ИмяФайлаОтветаКонфигуратора);
	СтрокаЗапуска = СтрСоединить(СоставСтрокиЗапуска, " ");
	КодВозврата = Ждать ЗапуститьПриложениеАсинх(СтрокаЗапуска, , Истина);
	
	ОтветКонфигуратора = Ждать ОтветКонфигуратора(ИмяФайлаОтветаКонфигуратора);
	
	Если КодВозврата <> 0 Тогда
		Ждать УдалитьФайлыАсинх(ПутьКВременнойФайловойИБ);
		ТекстИсключения = СтрШаблон(
			НСтр("ru='Ошибка при создании временной информационной базы ""%1"": %2'"),
			ПутьКВременнойФайловойИБ,
			ОтветКонфигуратора
		);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	СтрокаСоединения = СтрокаСоединения(СтрокаСоединенияКИБ);
КонецФункции

&НаКлиенте
Асинх Функция ПодготовитьСуществующуюИнформационнуюБазу()
	СтрокаСоединения = СтрокаСоединения(
		СтрокаСоединенияКСуществующейИБ,
		ПользовательСуществующейИБ,
		ПарольПользователяСуществующейИБ
	);
	
	СоставСтрокиЗапуска = Новый Массив;
	СоставСтрокиЗапуска.Добавить(СтрокаСоединения);
	ИмяФайлаОтветаКонфигуратора = ПолучитьИмяВременногоФайла();
	СоставСтрокиЗапуска.Добавить("/DumpDBCfgList -AllExtensions /Out """ + ИмяФайлаОтветаКонфигуратора + """");
	СтрокаЗапуска = СтрСоединить(СоставСтрокиЗапуска, " ");
	КодВозврата = Ждать ЗапуститьПриложениеАсинх(СтрокаЗапуска, , Истина);
	ОтветКонфигуратора = Ждать ОтветКонфигуратора(ИмяФайлаОтветаКонфигуратора);
	
	Если КодВозврата = 0 Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(ОтветКонфигуратора);
		Для Сч = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
			Если ВРег(ИмяРасширения) = ВРег(ТекстовыйДокумент.ПолучитьСтроку(Сч)) Тогда
				ТекстИсключения = СтрШаблон(
					НСтр("ru='Информационную базу ""%1"" невозможно использовать для работы с расширением ""%2"" т.к. она уже содержит расширение с таким же именем'"),
					СтрокаСоединенияКСуществующейИБ,
					ИмяРасширения
				);
				
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТекстИсключения = СтрШаблон(
			НСтр("ru='Ошибка проверки информационной базы ""%1"": %2'"),
			СтрокаСоединения,
			ОтветКонфигуратора
		);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
КонецФункции

&НаКлиенте
Асинх Функция Освободить()
	Если ВидИнформационнойБазы = 0 Тогда
		Ждать УдалитьФайлыАсинх(ПутьКВременнойФайловойИБ);
	Иначе
		Ждать ОсвободитьСуществующуюИнформационнуюБазу();
	КонецЕсли;
КонецФункции

// TODO 2025-07-04: Реализовать
&НаКлиенте
Асинх Функция ОсвободитьСуществующуюИнформационнуюБазу()
	Результат = Неопределено;
	
	Возврат Результат;
КонецФункции

#Область _Общие

&НаКлиенте
Асинх Функция ОтветКонфигуратора(ИмяФайлаОтвета)
	Результат = "";
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	Ждать ТекстовыйДокумент.ПрочитатьАсинх(ИмяФайлаОтвета);
	Результат = ТекстовыйДокумент.ПолучитьТекст();
	Ждать УдалитьФайлыАсинх(ИмяФайлаОтвета);
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СтрокаСоединения(СтрокаСоединенияКИБ, ИмяПользователя = "", Пароль = "")
	Результат = "";
	
	СоставСтрокиЗапуска = Новый Массив;
	СоставСтрокиЗапуска.Добавить("""" + ПутьКФайлуЗапуска1С + """");
	СоставСтрокиЗапуска.Добавить("DESIGNER");
	СоставСтрокиЗапуска.Добавить("/IBConnectionString");
	СоставСтрокиЗапуска.Добавить("""" + СтрЗаменить(СтрокаСоединенияКИБ, """", """""") + """");
	Если Не ПустаяСтрока(ИмяПользователя) Тогда
		СоставСтрокиЗапуска.Добавить("/N" + ИмяПользователя);
		Если Не ПустаяСтрока(ПарольПользователяСуществующейИБ) Тогда
			СоставСтрокиЗапуска.Добавить("/P" + Пароль);
		КонецЕсли;
	КонецЕсли;
	СоставСтрокиЗапуска.Добавить("/DisableStartupDialogs");
	
	Результат = СтрСоединить(СоставСтрокиЗапуска, " ");
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#КонецОбласти
