//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2025 Alexey A. Stepanenko 
//    * alexey.stepanenko@gmail.com
//    * TG: @AlexeyStepanenko
//    * https://github.com/alexey-stepanenko
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("Модули") Тогда
		Для Каждого Модуль Из Параметры.Модули Цикл
			НоваяСтрока = МодулиТестирования.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Модуль);
		КонецЦикла;
	КонецЕсли;
	ЗаполнитьРежимыРаботы();
	ЗаполнитьШаблоныФайлов();
	РежимРаботы = РежимСозданияРасширения();
	Элементы.ГруппаДлительнаяОперация.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ЭтоWindows =
		(СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86)
		Или (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64)
	;
	СуффиксФайлаЗапуска = "";
	Если ЭтоWindows Тогда
		СуффиксФайлаЗапуска = ".exe";
	КонецЕсли;
	ПутьКФайлуЗапуска1С = СтрШаблон(
		"%1%2%3",
		КаталогПрограммы(),
		"1cv8",
		СуффиксФайлаЗапуска
	);
	
	ЗаполнитьПараметрыРасширения();
	УстановитьОформлениеРежимаРаботы();
	ПоказатьВидИнформационнойБазы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОбновитьДанныеРасширенияИзФайла(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура РежимРаботыПриИзменении(Элемент)
	// TODO 2025-04-30: Удалить после реализации обновления расширения
	РежимРаботы = РежимСозданияРасширения();
	
	ЗаполнитьПараметрыРасширения();
	УстановитьОформлениеРежимаРаботы();
КонецПроцедуры

&НаКлиенте
Процедура ВидИнформационнойБазыПриИзменении(Элемент)
	ПоказатьВидИнформационнойБазы();
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПутьКФайлуЗапуска1СНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр = "Все файлы (*.*)|*.*";
	Диалог.ПолноеИмяФайла = ПутьКФайлуЗапуска1С;
	
	РезультатВыбора = Ждать Диалог.ВыбратьАсинх();
	Если РезультатВыбора <> Неопределено Тогда
		ПутьКФайлуЗапуска1С = РезультатВыбора[0];
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПолныйПутьКФайлуРасширенияНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Фильтр = "Файлы расширений (*.cfe)|*.cfe|Все файлы (*.*)|*.*";
	Диалог.ПолноеИмяФайла = ПолныйПутьКФайлуРасширения;
	
	РезультатВыбора = Ждать Диалог.ВыбратьАсинх();
	Если РезультатВыбора <> Неопределено Тогда
		ПолныйПутьКФайлуРасширения = РезультатВыбора[0];
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Асинх Процедура СоздатьРасширение(Команда)
	Элементы.ГруппаДлительнаяОперация.Видимость = Истина;
	Элементы.ГруппаПараметры.Доступность = Ложь;
	//ОткрытьФорму(
	//	"Обработка.МФГенерацияАвтотестов.Форма.ФормаДлительнойОперации",
	//	Новый Структура("КлючУникальности", УникальныйИдентификатор),
	//	,
	//	УникальныйИдентификатор,
	//	,
	//	,
	//	,
	//	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	//);
	
	ПроверяемыеРеквизиты = ПроверяемыеРеквизиты();
	
	ПродолжитьРаботу = Истина;
	Сообщения = Новый Массив;
	Для Каждого ПроверяемыйРеквизит Из ПроверяемыеРеквизиты Цикл
		Если ПустаяСтрока(ЭтаФорма[ПроверяемыйРеквизит.Ключ]) Тогда
			ПродолжитьРаботу = Ложь;
			Сообщения.Добавить(Новый Структура(
				"Текст, Поле",
				СтрШаблон("Поле ""%1""  не заполнено.", ПроверяемыйРеквизит.Значение),
				ПроверяемыйРеквизит.Значение
			));
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПродолжитьРаботу Тогда
		//ЗакрытьФормуДлительнойОперации();
		
		Для Каждого Сообщение Из Сообщения Цикл
			СообщениеПользователю = Новый СообщениеПользователю();
			ЗаполнитьЗначенияСвойств(СообщениеПользователю, Сообщение);
			СообщениеПользователю.Сообщить();
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
	// 1. Проверить и подготовить информационную базу
	Ждать ПодготовитьИнформационнуюБазу();
	
	// 2. Создаем каталог исходников расширения
	БазовыйКаталог = ПолучитьИмяВременногоФайла();
	
	СоставИмениКаталога = Новый Массив;
	СоставИмениКаталога.Добавить(БазовыйКаталог);
	СоставИмениКаталога.Добавить(ИмяРасширения);
	
	ПутьККаталогуИсходников = СтрСоединить(СоставИмениКаталога, ПолучитьРазделительПутиКлиента());
	КаталогИсходников = Новый Файл(ПутьККаталогуИсходников);
	
	Ждать СоздатьКаталогАсинх(ПутьККаталогуИсходников);
	
	// 3. Формируем исходники расширения
	// 3.1. Распаковать шаблон исходников в каталог исходников
	Поток = Новый ПотокВПамяти;
	Запись = Новый ЗаписьДанных(Поток);
	Ждать Запись.ЗаписатьАсинх(ШаблонРасширения);
	Ждать Запись.ЗакрытьАсинх();
	Архив = Новый ЧтениеZipФайла(Поток);
	Архив.ИзвлечьВсе(ПутьККаталогуИсходников, РежимВосстановленияПутейФайловZIP.Восстанавливать);
	
	// 3.2. Формирование общих модулей с тестами
	ПутьККаталогуОбщихМодулей = ПутьКОбъекту(ПутьККаталогуИсходников, "CommonModules");
	Для Каждого МодульТестирования Из МодулиТестирования Цикл
		ОписаниеМодуляТестирования = СтрЗаменить(ШаблонМодуляСТестом, "&&ModuleName&&", МодульТестирования.Имя);
		ИмяФайлаОписаниеМодуляТестирования = ПутьКОбъекту(ПутьККаталогуОбщихМодулей, МодульТестирования.Имя + ".xml");
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(ОписаниеМодуляТестирования);
		Ждать ТекстовыйДокумент.ЗаписатьАсинх(ИмяФайлаОписаниеМодуляТестирования);
		
		ПутьККаталогуМодуля = Ждать СоздатьКаталогИсходника(
			ПутьККаталогуОбщихМодулей,
			МодульТестирования.Имя + ",Ext"
		);
		ИмяФайлаМодуляТестирования = ПутьКОбъекту(
			ПутьККаталогуМодуля,
			"Module.bsl"
		);
		ТекстовыйДокумент.УстановитьТекст(МодульТестирования.Текст);
		Ждать ТекстовыйДокумент.ЗаписатьАсинх(ИмяФайлаМодуляТестирования);
	КонецЦикла;
	
	// 3.3. Вставка в xml файлы значений переменных (переменные задаются конструкцией "&&<Имя переменной>&&")
	Модули = Новый Массив;
	Тесты = Новый Массив;
	ШаблонОписанияМодуля = "			<CommonModule>%1</CommonModule>";
	ШаблонОписанияТеста = "				<xr:Item xsi:type=""xr:MDObjectRef"">CommonModule.%1</xr:Item>";
	Для Каждого МодульТестирования Из МодулиТестирования Цикл
		Модули.Добавить(СтрШаблон(ШаблонОписанияМодуля, МодульТестирования.Имя));
		Тесты.Добавить(СтрШаблон(ШаблонОписанияТеста, МодульТестирования.Имя));
	КонецЦикла;
	ОбщиеПеременные = Новый Соответствие;
	ОбщиеПеременные.Вставить("&&Name&&", ИмяРасширения);
	ОбщиеПеременные.Вставить("&&Version&&", ВерсияРасширения);
	ОбщиеПеременные.Вставить("&&Modules&&", СтрСоединить(Модули, Символы.ПС));
	ОбщиеПеременные.Вставить("&&Tests&&", СтрСоединить(Тесты, Символы.ПС));
	
	ФайлыОписаний = Ждать НайтиФайлыАсинх(ПутьККаталогуИсходников, "*.xml", Истина);
	Для Каждого ФайлОписания Из ФайлыОписаний Цикл
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		Ждать ТекстовыйДокумент.ПрочитатьАсинх(ФайлОписания.ПолноеИмя);
		Описание = ТекстовыйДокумент.ПолучитьТекст();
		
		Для Каждого ОбщаяПеременная Из ОбщиеПеременные Цикл
			Описание = СтрЗаменить(Описание, ОбщаяПеременная.Ключ, ОбщаяПеременная.Значение);
		КонецЦикла;
		
		ГУИДы = ГУИДыИзОписания(Описание);
		Для Каждого ГУИД Из ГУИДы Цикл
			Описание = СтрЗаменить(Описание, ГУИД.Ключ, ГУИД.Значение);
		КонецЦикла;
		
		ТекстовыйДокумент.УстановитьТекст(Описание);
		Ждать ТекстовыйДокумент.ЗаписатьАсинх(ФайлОписания.ПолноеИмя);
	КонецЦикла;
	
	// 4. Загрузка исходников расширения во временную базу
	Если ВидИнформационнойБазы = 0 Тогда
		ОсновнаяСтрокаЗапуска = СтрокаЗапуска(СтрШаблон(
			"File=""%1""",
			ПутьКВременнойФайловойИБ
		));
	Иначе
		ОсновнаяСтрокаЗапуска = СтрокаЗапуска(
			СтрокаСоединенияКСуществующейИБ,
			ПользовательСуществующейИБ,
			ПарольПользователяСуществующейИБ
		);
	КонецЕсли;
	ИмяФайлаОтветаКонфигуратора = ПолучитьИмяВременногоФайла();
	
	СоставСтрокиЗапуска = Новый Массив;
	СоставСтрокиЗапуска.Добавить(ОсновнаяСтрокаЗапуска);
	СоставСтрокиЗапуска.Добавить(СтрШаблон(
		"/LoadConfigFromFiles ""%1"" -AllExtensions",
		БазовыйКаталог
	));
	СоставСтрокиЗапуска.Добавить(СтрШаблон(
		"/Out ""%1""",
		ИмяФайлаОтветаКонфигуратора
	));
	СтрокаЗапуска = СтрСоединить(СоставСтрокиЗапуска, " ");
	КодВозврата = Ждать ЗапуститьПриложениеАсинх(СтрокаЗапуска, , Истина);
	ОтветКонфигуратора = Ждать ОтветКонфигуратора(ИмяФайлаОтветаКонфигуратора);
	Если КодВозврата <> 0 Тогда
		Ждать УдалениеДанныхДляРаботыСРасширением(ПутьККаталогуИсходников);
		ТекстИсключения = СтрШаблон(
			НСтр("ru='Ошибка при загрузке исходников расширения: %1'"),
			ОтветКонфигуратора
		);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	// 5. Выгрузка расширения
	СоставСтрокиЗапуска = Новый Массив;
	СоставСтрокиЗапуска.Добавить(ОсновнаяСтрокаЗапуска);
	СоставСтрокиЗапуска.Добавить(СтрШаблон(
		"/DumpCfg ""%1"" -Extension ""%2""",
		ПолныйПутьКФайлуРасширения,
		ИмяРасширения
	));
	СоставСтрокиЗапуска.Добавить(СтрШаблон(
		"/Out ""%1""",
		ИмяФайлаОтветаКонфигуратора
	));
	СтрокаЗапуска = СтрСоединить(СоставСтрокиЗапуска, " ");
	КодВозврата = Ждать ЗапуститьПриложениеАсинх(СтрокаЗапуска, , Истина);
	ОтветКонфигуратора = ОтветКонфигуратора(ИмяФайлаОтветаКонфигуратора);
	Если КодВозврата <> 0 Тогда
		Ждать УдалениеДанныхДляРаботыСРасширением(ПутьККаталогуИсходников);
		ТекстИсключения = СтрШаблон(
			НСтр("ru='Ошибка при выгрузке расширения: %1'"),
			ОтветКонфигуратора
		);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	// 6. Удаляем временные данные
	Ждать УдалениеДанныхДляРаботыСРасширением(БазовыйКаталог);
	Элементы.ГруппаДлительнаяОперация.Видимость = Ложь;
	Элементы.ГруппаПараметры.Доступность = Истина;
	Ждать ПредупреждениеАсинх("Создание расширения завершено", 30, "Сообщение");
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРасширение(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РежимыРаботы

&НаКлиентеНаСервереБезКонтекста
Функция РежимСозданияРасширения()
	Возврат 0;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РежимОбновленияРасширения()
	Возврат 1;
КонецФункции

&НаСервере
Процедура ЗаполнитьРежимыРаботы()
	Элементы.РежимРаботы.СписокВыбора.Очистить();
	
	Элементы.РежимРаботы.СписокВыбора.Добавить(
		РежимСозданияРасширения(),
		НСтр("ru='Создание расширения'")
	);
	Элементы.РежимРаботы.СписокВыбора.Добавить(
		РежимОбновленияРасширения(),
		НСтр("ru='Обновление расширения'")
	);
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьШаблоныФайлов()
	ШаблонРасширения = Обработки.МФГенерацияАвтотестов.ПолучитьМакет("ШаблонРасширения");
	ШаблонМодуляСТестом = Обработки.МФГенерацияАвтотестов.ПолучитьМакет("ШаблонМодуляСТестом").ПолучитьТекст();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыРасширения()
	Если РежимРаботы = РежимСозданияРасширения() Тогда
		ИмяРасширения = МФИнструментыРазработчикаКлиент.ИмяРасширенияТестирования();
		ВерсияРасширения = МФИнструментыРазработчикаКлиент.ВерсияРасширенияТестирования();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОформлениеРежимаРаботы()
	Для Каждого Элемент Из Элементы.ФормаРежимы.ПодчиненныеЭлементы Цикл
		Элемент.Видимость = Ложь;
	КонецЦикла;
	Если РежимРаботы = РежимСозданияРасширения() Тогда
		Элементы.ГруппаИнформационнаяБазаШапка.Заголовок = НСтр("ru='Информационная база для создания расширения'");
		КнопкаРежим = Элементы.ФормаСоздатьРасширение;
	ИначеЕсли РежимРаботы = РежимОбновленияРасширения() Тогда
		Элементы.ГруппаИнформационнаяБазаШапка.Заголовок = НСтр("ru='Информационная база для обновления расширения'");
		КнопкаРежим = Элементы.ФормаОбновитьРасширение;
	Иначе
		// этого не может быть
	КонецЕсли;
	КнопкаРежим.Видимость = Истина;
	КнопкаРежим.КнопкаПоУмолчанию = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВидИнформационнойБазы()
	Для Каждого ПодчиненныйЭлемент Из Элементы.ГруппаИнформационнаяБаза.ПодчиненныеЭлементы Цикл
		ПодчиненныйЭлемент.Видимость = Ложь;
	КонецЦикла;
	
	ИмяАктивнойСтраницы = СтрШаблон(
		НСтр("ru='%1%2'"),
		Элементы.ГруппаИнформационнаяБаза.Имя,
		Формат(ВидИнформационнойБазы, "ЧН=0; ЧГ=")
	);
	Элемент = Элементы.Найти(ИмяАктивнойСтраницы);
	Если Элемент <> Неопределено Тогда
		Элемент.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

#Область РасширениеСТестами

&НаСервере
Функция ПроверяемыеРеквизиты()
	Результат = Новый Структура;
	
	ИменаЭлементов = Новый Массив;
	ИменаЭлементов.Добавить("ПутьКФайлуЗапуска1С");
	ИменаЭлементов.Добавить("ПолныйПутьКФайлуРасширения");
	ИменаЭлементов.Добавить("ИмяРасширения");
	ИменаЭлементов.Добавить("ВерсияРасширения");
	Если ВидИнформационнойБазы = 1 Тогда
		ИменаЭлементов.Добавить("СтрокаСоединенияКСуществующейИБ");
	КонецЕсли;
	
	Реквизиты = ЭтаФорма.ПолучитьРеквизиты();
	Для Каждого Реквизит Из Реквизиты Цикл
		Если ИменаЭлементов.Найти(Реквизит.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Вставить(Реквизит.Имя, Реквизит.Заголовок);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

//&НаКлиенте
//Процедура ЗакрытьФормуДлительнойОперации()
//	Оповестить("МФЗакрытьФормуДлительнойОперации", , ЭтаФорма);
//	
//	Пока Истина Цикл
//		РезультатПоиска = ПолучитьФорму(
//			"Обработка.МФГенерацияАвтотестов.Форма.ФормаДлительнойОперации",
//			,
//			,
//			УникальныйИдентификатор
//		);
//		Если РезультатПоиска = Неопределено Тогда
//			Прервать;
//		КонецЕсли;
//	КонецЦикла;
//КонецПроцедуры

// Создает подкаталог в каталоге исходников расширения
//
// Параметры:
//  ПутьКБазовомуКаталогу - Строка - Путь к базовому каталогу для построения;
//  ИменаКаталогов - Строка - Путь к целевому каталогу, разделителем является символ запятой ",". Например:
//    "Subsystems,ОбщийМодуль,Ext";
//
&НаКлиенте
Асинх Функция СоздатьКаталогИсходника(ПутьКБазовомуКаталогу, ИменаКаталогов)
	ПутьКЦелевомуКаталогу = ПутьКОбъекту(ПутьКБазовомуКаталогу, ИменаКаталогов);
	Результат = Ждать СоздатьКаталогАсинх(ПутьКЦелевомуКаталогу);
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПутьКОбъекту(ПутьКБазовомуКаталогу, ИменаОбъектов)
	СоставПутиКЦелевомуОбъекту = СтрРазделить(ИменаОбъектов, ",");
	СоставПутиКЦелевомуОбъекту.Вставить(0, ПутьКБазовомуКаталогу);
	Результат = СтрСоединить(СоставПутиКЦелевомуОбъекту, ПолучитьРазделительПути());
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ГУИДыИзОписания(Описание)
	Результат = Новый Соответствие;
	ЗначащиеСимволы = "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюяABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
	
	НачалоБлока = "&&GUID";
	КонецБлока = "&&";
	НачальнаяПозицияПоиска = 1;
	Пока Истина Цикл
		ПозицияНачала = СтрНайти(Описание, НачалоБлока, НаправлениеПоиска.СНачала, НачальнаяПозицияПоиска);
		Если ПозицияНачала = 0 Тогда
			Прервать;
		КонецЕсли;
		
		НачальнаяПозицияПоиска = ПозицияНачала + СтрДлина(НачалоБлока);
		
		ПозицияКонца = СтрНайти(Описание, КонецБлока, НаправлениеПоиска.СНачала, ПозицияНачала + СтрДлина(НачалоБлока));
		Если ПозицияКонца = 0 Или ПозицияКонца - ПозицияНачала > 10 Тогда
			Продолжить;
		КонецЕсли;
		
		ИсходнаяСтрокаНомерГУИДа = Сред(
			Описание, 
			ПозицияНачала + СтрДлина(НачалоБлока),
			ПозицияКонца - ПозицияНачала - СтрДлина(НачалоБлока)
		);
		
		СоставНомера = Новый Массив;
		Для Сч = 1 По СтрДлина(ИсходнаяСтрокаНомерГУИДа) Цикл
			Символ = Сред(ИсходнаяСтрокаНомерГУИДа, Сч, 1);
			Если СтрНайти(ЗначащиеСимволы, Символ) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СоставНомера.Добавить(Символ);
		КонецЦикла;
		НомерГУИДа = СтрСоединить(СоставНомера, "");
		
		ГУИД = СтрШаблон("&&GUID%1&&", НомерГУИДа);
		Результат.Вставить(ГУИД, Новый УникальныйИдентификатор());
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Асинх Функция ПодготовитьИнформационнуюБазу()
	СоставСтрокиЗапуска = Новый Массив;
	ИмяФайлаОтветаКонфигуратора = ПолучитьИмяВременногоФайла();
	
	Если ВидИнформационнойБазы = 0 Тогда
		ПутьКВременнойФайловойИБ = ПолучитьИмяВременногоФайла();
		Ждать СоздатьКаталогАсинх(ПутьКВременнойФайловойИБ);
		
		СоставСтрокиЗапуска = Новый Массив;
		СоставСтрокиЗапуска.Добавить("""" + ПутьКФайлуЗапуска1С + """");
		СоставСтрокиЗапуска.Добавить("CREATEINFOBASE");
		СоставСтрокиЗапуска.Добавить(СтрШаблон("File=""%1""", ПутьКВременнойФайловойИБ));
		СоставСтрокиЗапуска.Добавить("/Out " + ИмяФайлаОтветаКонфигуратора);
		СтрокаЗапуска = СтрСоединить(СоставСтрокиЗапуска, " ");
		КодВозврата = Ждать ЗапуститьПриложениеАсинх(СтрокаЗапуска, , Истина);
		
		ОтветКонфигуратора = Ждать ОтветКонфигуратора(ИмяФайлаОтветаКонфигуратора);
		
		Если КодВозврата <> 0 Тогда
			//ЗакрытьФормуДлительнойОперации();
			ТекстИсключения = СтрШаблон(
				НСтр("ru='Ошибка при создании временной информационной базы ""%1"": %2'"),
				ПутьКВременнойФайловойИБ,
				ОтветКонфигуратора
			);
			
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
	Иначе
		СтрокаСоединения = СтрокаСоединенияКСуществующейИБ;
		ИмяПользователя = ПользовательСуществующейИБ;
		Пароль = ПарольПользователяСуществующейИБ;
		
		СоставСтрокиЗапуска.Добавить(СтрокаЗапуска(СтрокаСоединения, ИмяПользователя, Пароль));
		СоставСтрокиЗапуска.Добавить("/DumpDBCfgList -AllExtensions /Out """ + ИмяФайлаОтветаКонфигуратора + """");
		СтрокаЗапуска = СтрСоединить(СоставСтрокиЗапуска, " ");
		КодВозврата = Ждать ЗапуститьПриложениеАсинх(СтрокаЗапуска, , Истина);
		ОтветКонфигуратора = Ждать ОтветКонфигуратора(ИмяФайлаОтветаКонфигуратора);
		
		Если КодВозврата = 0 Тогда
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.УстановитьТекст(ОтветКонфигуратора);
			Для Сч = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
				Если ВРег(ИмяРасширения) = ВРег(ТекстовыйДокумент.ПолучитьСтроку(Сч)) Тогда
					ТекстИсключения = СтрШаблон(
						НСтр("ru='Информационную базу ""%1"" невозможно использовать для работы с расширением ""%2"" т.к. она уже содержит расширение с таким же именем'"),
						СтрокаСоединения,
						ИмяРасширения
					);
					
					ВызватьИсключение ТекстИсключения;
				КонецЕсли;
			КонецЦикла;
		Иначе
			//ЗакрытьФормуДлительнойОперации();
			ТекстИсключения = СтрШаблон(
				НСтр("ru='Ошибка проверки информационной базы ""%1"": %2'"),
				СтрокаСоединения,
				ОтветКонфигуратора
			);
			
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция СтрокаЗапуска(СтрокаСоединения, ИмяПользователя = "", Пароль = "")
	Результат = "";
	
	СоставСтрокиЗапуска = Новый Массив;
	СоставСтрокиЗапуска.Добавить("""" + ПутьКФайлуЗапуска1С + """");
	СоставСтрокиЗапуска.Добавить("DESIGNER");
	СоставСтрокиЗапуска.Добавить("/IBConnectionString");
	СоставСтрокиЗапуска.Добавить("""" + СтрЗаменить(СтрокаСоединения, """", """""") + """");
	Если Не ПустаяСтрока(ИмяПользователя) Тогда
		СоставСтрокиЗапуска.Добавить("/N" + ИмяПользователя);
		Если Не ПустаяСтрока(ПарольПользователяСуществующейИБ) Тогда
			СоставСтрокиЗапуска.Добавить("/P" + Пароль);
		КонецЕсли;
	КонецЕсли;
	СоставСтрокиЗапуска.Добавить("/DisableStartupDialogs");
	
	Результат = СтрСоединить(СоставСтрокиЗапуска, " ");
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Асинх Функция ОтветКонфигуратора(ИмяФайлаОтвета)
	Результат = "";
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	Ждать ТекстовыйДокумент.ПрочитатьАсинх(ИмяФайлаОтвета);
	Результат = ТекстовыйДокумент.ПолучитьТекст();
	Ждать УдалитьФайлыАсинх(ИмяФайлаОтвета);
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Асинх Функция УдалениеДанныхДляРаботыСРасширением(ПутьККаталогуИсходников)
	Ждать УдалитьФайлыАсинх(ПутьККаталогуИсходников);
	Если ВидИнформационнойБазы = 0 Тогда
		Ждать УдалитьФайлыАсинх(ПутьКВременнойФайловойИБ);
	Иначе
		ИмяФайлаОтветаКонфигуратора = ПолучитьИмяВременногоФайла();
		СоставСтрокиЗапуска = Новый Массив;
		СоставСтрокиЗапуска.Добавить(СтрокаЗапуска(
			СтрокаСоединенияКСуществующейИБ,
			ПользовательСуществующейИБ,
			ПарольПользователяСуществующейИБ
		));
		СоставСтрокиЗапуска.Добавить(СтрШаблон(
			"/DeleteCfg -Extension ""%1""",
			ИмяРасширения
		));
		СоставСтрокиЗапуска.Добавить(СтрШаблон(
			"/Out ""%1""",
			ИмяФайлаОтветаКонфигуратора
		));
		СтрокаЗапуска = СтрСоединить(СоставСтрокиЗапуска, " ");
		КодВозврата = Ждать ЗапуститьПриложениеАсинх(СтрокаЗапуска, , Истина);
		ОтветКонфигуратора = Ждать ОтветКонфигуратора(ИмяФайлаОтветаКонфигуратора);
		Если КодВозврата <> 0 Тогда
			ТекстИсключения = СтрШаблон(
				НСтр("ru='Ошибка при удалении расширения ""%1"" из информационной базы ""%2"": %3. Необходимо удалить его вручную.'"),
				ИмяРасширения,
				СтрокаСоединенияКСуществующейИБ,
				ОтветКонфигуратора
			);
			
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
	КонецЕсли;
КонецФункции

#КонецОбласти

#КонецОбласти
