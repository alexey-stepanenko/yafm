//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2025 Alexey A. Stepanenko 
//    * alexey.stepanenko@gmail.com
//    * TG: @AlexeyStepanenko
//    * https://github.com/alexey-stepanenko
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ДеревоФорм = РеквизитФормыВЗначение("ДеревоФормКонфигурации");
	МФИнструментыРазработчика.СформироватьДеревоФорм(ДеревоФорм);
	ЗначениеВРеквизитФормы(ДеревоФорм, "ДеревоФормКонфигурации");
	ФормаМодифицируется = Истина;
	Шаблоны = МФИнструментыРазработчика.СформироватьШаблоныПоМакету(
		Обработки.МФГенерацияАвтотестов.ПолучитьМакет("ШаблоныМодуляТестирования")
	);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ТестируемыеФормы

&НаКлиенте
Процедура ТестируемыеФормыПриАктивизацииСтроки(Элемент)
	УстановитьПараметрыТекущейФормы();
	УстановитьВидимостьДоступностьЭлементов();
	ОбновитьОформлениеЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ТестируемыеФормыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	УстановитьПараметрыТекущейФормы();
КонецПроцедуры

&НаКлиенте
Процедура ТестируемыеФормыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ТестируемыеФормы.ТекущиеДанные;
	ТекущиеДанные.ФормаМодифицируется = Ложь;
	ТекущиеДанные.МакетСуществует = Истина;
	ТекущиеДанные.МакетСовпадает = Истина;
	ТекущиеДанные.ИмяМакета = "";
	ТекущиеДанные.ИмяМодуля = "";
	ТекущиеДанные.ТекстМакета = "";
	ТекущиеДанные.ТекстМодуля = "";
	Если ПустаяСтрока(ТекущиеДанные.ИмяФормы) Тогда
		Возврат;
	КонецЕсли;
	
	//АдресДанныхДляТестирования = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	АдресДанныхДляТестирования = ПоместитьВоВременноеХранилище(Неопределено, ЭтаФорма.УникальныйИдентификатор);
	МФТестированиеКлиент.ПолучитьФормуПоИмени(ТекущиеДанные.ИмяФормы, Истина, АдресДанныхДляТестирования);
	//ПолучитьФорму(ТекущиеДанные.ИмяФормы);
	ПараметрыТестируемойФормы = ПараметрыФормыИзКэша(ТекущиеДанные.ИмяФормы, Шаблоны, АдресДанныхДляТестирования);
	
	Если ПараметрыТестируемойФормы <> Неопределено Тогда
		ТекущиеДанные.ФормаМодифицируется = Истина;
		ТекущиеДанные.МакетСуществует = ПараметрыТестируемойФормы.МакетСуществует;
		ТекущиеДанные.МакетСовпадает = ПараметрыТестируемойФормы.МакетСовпадает;
		ТекущиеДанные.ИмяМакета = ПараметрыТестируемойФормы.ИмяМакета;
		ТекущиеДанные.ИмяМодуля = ПараметрыТестируемойФормы.ИмяМодуля;
		ТекущиеДанные.ТекстМакета = ПараметрыТестируемойФормы.Макет;
		ТекущиеДанные.ТекстМодуля = ПараметрыТестируемойФормы.ТекстМодуля;
	КонецЕсли;
	
	ТекущиеДанные.СтрокаСформирована = Истина;
	
	ТестируемыеФормыПриАктивизацииСтроки(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТестируемыеФормыИмяФормыНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	Если Элементы.ТестируемыеФормы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ДеревоФорм", ДеревоФормКонфигурации);
	ПараметрыПодбора.Вставить(
		"ВыбраннаяФорма",
		Элементы.ТестируемыеФормы.ТекущиеДанные.ИмяФормы
	);
	ПараметрыПодбора.Вставить(
		"ВыбранныеФормы",
		ВыбранныеФормы(Элементы.ТестируемыеФормы.ТекущиеДанные.ИмяФормы)
	);
	
	// BSLLS:NestedFunctionInParameters-off
	ОткрытьФорму(
		"ОбщаяФорма.МФВыборФормы",
		ПараметрыПодбора, 
		ЭтаФорма, 
		ЭтаФорма, 
		, 
		, 
		Новый ОписаниеОповещения(
			"ПослеВыбораТестируемойФормы",
			ЭтаФорма,
			Элементы.ТестируемыеФормы.ТекущиеДанные
		), 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	// BSLLS:NestedFunctionInParameters-on
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьМодуль(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьВсеМодули(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьФорму(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьВидимостьДоступностьЭлементов()
	Элементы.ИмяТестируемойФормы.Доступность =Не ПустаяСтрока(ИмяТестируемойФормы);
	Элементы.ОткрытьФорму.Доступность = Не ПустаяСтрока(ИмяТестируемойФормы);
	Элементы.ИмяМакета.Доступность = Не ПустаяСтрока(ИмяМакета);
	Элементы.ИмяМодуля.Доступность = Не ПустаяСтрока(ИмяМодуля);
	Элементы.ТекстМодуля.Доступность = Не ПустаяСтрока(ТекстМодуля);
	Элементы.ТекстМакета.Доступность = Не ПустаяСтрока(ТекстМакета);
КонецПроцедуры

&НаСервере
Процедура ОбновитьОформлениеЭлементов()
	Если ФормаМодифицируется Тогда
		Элементы.ГруппаИмяФормы.ЦветФона = Новый Цвет();
		Элементы.ИмяТестируемойФормы.ЦветТекстаЗаголовка = Новый Цвет();
		Элементы.СтатусФормы.Видимость = Ложь;
	Иначе
		Элементы.ГруппаИмяФормы.ЦветФона = ЦветаСтиля.МФЦветОтсутствующихОбъектов;
		Элементы.ИмяТестируемойФормы.ЦветТекстаЗаголовка = ЦветаСтиля.МФЦветВыделенныхНадписей;
		Элементы.СтатусФормы.Видимость = Истина;
	КонецЕсли;
	Если Не МакетСуществует Тогда
		Элементы.ГруппаИмяМакета.ЦветФона = ЦветаСтиля.МФЦветОтсутствующихОбъектов;
		Элементы.ИмяМакета.ЦветТекстаЗаголовка = ЦветаСтиля.МФЦветВыделенныхНадписей;
		Элементы.СтатусМакета.Видимость = Истина;
		Элементы.СтатусМакета.Заголовок = НСтр("ru='Макет не существует'")
	ИначеЕсли Не МакетСовпадает Тогда
		Элементы.ГруппаИмяМакета.ЦветФона = ЦветаСтиля.МФЦветРазличающихсяМакетов;
		Элементы.ИмяМакета.ЦветТекстаЗаголовка = ЦветаСтиля.МФЦветВыделенныхНадписей;
		Элементы.СтатусМакета.Видимость = Истина;
		Элементы.СтатусМакета.Заголовок = 
			НСтр("ru='Автотесты сформированы на основе данных в кэше. Если необходимо"
				+ " сформировать на основе данных из конфигурации - актуализируйте кэш"
				+ " по данной форме.'"
			)
		;
	Иначе
		Элементы.ГруппаИмяМакета.ЦветФона = Новый Цвет();
		Элементы.ИмяМакета.ЦветТекстаЗаголовка = Новый Цвет();
		Элементы.СтатусМакета.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ВыбранныеФормы(ВыбраннаяФорма)
	Результат = Новый Массив;
	
	Для Каждого Элемент Из ТестируемыеФормы Цикл
		Если
			ПустаяСтрока(Элемент.ИмяФормы)
			Или Результат.Найти(Элемент.ИмяФормы) <> Неопределено
			Или Элемент.ИмяФормы = ВыбраннаяФорма
		Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(Элемент.ИмяФормы);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ПослеВыбораТестируемойФормы(РезультатЗакрытия, ТекущиеДанные) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТестируемаяФорма = РезультатЗакрытия.ВыбраннаяФорма;
	ДеревоФормКонфигурации.ПолучитьЭлементы().Очистить();
	МФИнструментыРазработчикаКлиентСервер.ЗаполнитьВетки(
		ДеревоФормКонфигурации, 
		РезультатЗакрытия.ДеревоФормКонфигурации
	);
	ТекущиеДанные.ИмяФормы = ТестируемаяФорма;
	
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыФормыИзКэша(_ИмяФормы, Шаблоны, АдресДанныхДляТестирования)
	Результат = РегистрыСведений.МФМакеты.КэшФорм(
		"ИмяМакета,Макет,МакетСуществует,МакетСовпадает",
		РегистрыСведений.МФМакеты.РежимОтбораФорма(),
		_ИмяФормы
	).Получить(_ИмяФормы);
	
	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого Элемент Из Результат Цикл
		Если ТипЗнч(Элемент.Значение) <> Тип("ХранилищеЗначения") Тогда
			Продолжить;
		КонецЕсли;
		Результат[Элемент.Ключ] = Элемент.Значение.Получить();
	КонецЦикла;
	
	ИмяМодуля = "_" + СтрЗаменить(_ИмяФормы, ".", "_");
	МФИнструментыРазработчикаПереопределяемый.СформироватьИмяМодуляПоИмениФормы(
		ИмяМодуля,
		_ИмяФормы
	);
	Результат.Вставить("ИмяМодуля", ИмяМодуля);
	
	ТекстМодуля = "";
	Попытка
		ТекстМодуля = ТекстМодуляТестированияПоМакету(
			_ИмяФормы,
			Результат.ИмяМакета,
			Шаблоны,
			АдресДанныхДляТестирования
		);
	Исключение
	КонецПопытки;
	Результат.Вставить("ТекстМодуля", ТекстМодуля);
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура УстановитьПараметрыТекущейФормы()
	ТекущиеДанные = Элементы.ТестируемыеФормы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ПустаяСтрока(ТекущиеДанные.ИмяФормы) Тогда
		ИмяТестируемойФормы = "";
		ИмяМакета = "";
		ИмяМодуля = "";
		ТекстМакета = "";
		ТекстМодуля = "";
		ФормаМодифицируется = Истина;
		МакетСуществует = Истина;
		МакетСовпадает = Истина;
	Иначе
		ИмяТестируемойФормы = ТекущиеДанные.ИмяФормы;
		ИмяМакета = ТекущиеДанные.ИмяМакета;
		ИмяМодуля = ТекущиеДанные.ИмяМодуля;
		ТекстМакета = ТекущиеДанные.ТекстМакета;
		ТекстМодуля = ТекущиеДанные.ТекстМодуля;
		ФормаМодифицируется = ТекущиеДанные.ФормаМодифицируется;
		МакетСуществует = ТекущиеДанные.МакетСуществует;
		МакетСовпадает = ТекущиеДанные.МакетСовпадает;
	КонецЕсли;
КонецПроцедуры

#Область ГенерацияТекстаМодуляТестирования

&НаСервереБезКонтекста
Функция ТекстМодуляТестированияПоМакету(ИмяФормы, ИмяМакета, Шаблоны, АдресДанныхДляТестирования)
	Результат = "";
	
	ДанныеДляТестирования = ПолучитьИзВременногоХранилища(АдресДанныхДляТестирования);
	
	ИсполняемыеСценарии = "";
	СоздатьИсполняемыеСценарииПроверкиРеквизитов(
		ДанныеДляТестирования.ОписаниеРеквизитов,
		ИсполняемыеСценарии, 
		Шаблоны
	);
	СоздатьИсполняемыеСценарииПроверкиЭлементовФормы(
		ДанныеДляТестирования.ОписаниеЭлементов,
		ИсполняемыеСценарии, 
		Шаблоны
	);
	
	ШаблонМодуля = Шаблоны.ТекстМодуля;
	
	Результат = СтрЗаменить(ШаблонМодуля, "&&ИсполняемыеСценарии", СокрП(ИсполняемыеСценарии));
	Результат = СтрЗаменить(Результат, "&&ИмяФормы", ИмяФормы);
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Процедура СоздатьИсполняемыеСценарииПроверкиРеквизитов(ОписаниеМодификацийРеквизитов, ИсполняемыеСценарии, Шаблоны)
	Если ОписаниеМодификацийРеквизитов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Тесты = "";
	Для Каждого Элемент Из ОписаниеМодификацийРеквизитов Цикл
		// Добавляем тест проверки существования реквизита
		ДобавитьТест(
			Тесты, 
			"РеквизитСуществует",
			"Реквизит с именем """"&&ИмяРеквизита"""" существует",
			"""&&ИмяРеквизита""",
			Шаблоны
		);
		
		Для Каждого ОписаниеТипаРеквизита Из Элемент.Значение.ТипыРеквизита Цикл
			Если МФПовтИсп.ЭтоНаименованиеТипаЧисло(ОписаниеТипаРеквизита.Ключ) Тогда
				КвалификаторыЧисла = ОписаниеТипаРеквизита.Значение.Получить("Тип").КвалификаторыЧисла;
				Модификатор = "";
				ПараметрДопустимыйЗнак = "Любой";
				ПараметрРазрядность = Формат(КвалификаторыЧисла.Разрядность, "ЧН=0; ЧГ=");
				ПараметрРазрядностьДробнойЧасти = Формат(КвалификаторыЧисла.РазрядностьДробнойЧасти, "ЧН=0; ЧГ=");
				Если КвалификаторыЧисла.ДопустимыйЗнак = ДопустимыйЗнак.Неотрицательный Тогда
					ПараметрДопустимыйЗнак = "Неотрицательный";
					Модификатор = "положительное ";
				КонецЕсли;
				ШаблонЗаголовкаТеста = "Типы реквизита с именем """"&&ИмяРеквизита"""" содержат %1число длиной """"%2"""" и дробной частью """"%3""""";
				ЗаголовокТеста = СтрШаблон(
					ШаблонЗаголовкаТеста,
					Модификатор,
					ПараметрРазрядность,
					ПараметрРазрядностьДробнойЧасти,
				);
				ДобавитьТест(
					Тесты, 
					"ТипыРеквизитаСодержатЧисло",
					ЗаголовокТеста,
					СтрШаблон(
						"""&&ИмяРеквизита"",ДопустимыйЗнак.%1,%2,%3",
						ПараметрДопустимыйЗнак,
						ПараметрРазрядность,
						ПараметрРазрядностьДробнойЧасти
					),
					Шаблоны
				);
			ИначеЕсли МФПовтИсп.ЭтоНаименованиеТипаСтрока(ОписаниеТипаРеквизита.Ключ) Тогда
				КвалификаторыСтроки = ОписаниеТипаРеквизита.Значение.Получить("Тип").КвалификаторыСтроки;
				Модификатор = "";
				ПараметрДопустимаяДлина = "Переменная";
				ПараметрДлина = Формат(КвалификаторыСтроки.Длина, "ЧН=0; ЧГ=");
				Если КвалификаторыСтроки.ДопустимаяДлина = ДопустимаяДлина.Фиксированная Тогда
					ПараметрДопустимыйЗнак = "Фиксированная";
					Модификатор = "фиксированную ";
				КонецЕсли;
				ШаблонЗаголовкаТеста = "Типы реквизита с именем """"&&ИмяРеквизита"""" содержат %1строку длиной """"%2"""" символов";
				ЗаголовокТеста = СтрШаблон(
					ШаблонЗаголовкаТеста,
					Модификатор,
					ПараметрДлина
				);
				ДобавитьТест(
					Тесты, 
					"ТипыРеквизитаСодержатСтроку",
					ЗаголовокТеста,
					СтрШаблон(
						"""&&ИмяРеквизита"",ДопустимаяДлина.%1,%2",
						ПараметрДопустимаяДлина,
						ПараметрДлина
					),
					Шаблоны
				);
			ИначеЕсли МФПовтИсп.ЭтоНаименованиеТипаДата(ОписаниеТипаРеквизита.Ключ) Тогда
				КвалификаторыДаты = ОписаниеТипаРеквизита.Значение.Получить("Тип").КвалификаторыДаты;
				Если КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Дата Тогда
					ПараметрЧастиДаты = "Дата";
					Модификатор = "дату";
				ИначеЕсли КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Время Тогда
					ПараметрЧастиДаты = "Время";
					Модификатор = "время";
				Иначе
					ПараметрЧастиДаты = "ДатаВремя";
					Модификатор = "дату и время";
				КонецЕсли;
				ШаблонЗаголовкаТеста = "Типы реквизита с именем """"&&ИмяРеквизита"""" содержат %1";
				ЗаголовокТеста = СтрШаблон(ШаблонЗаголовкаТеста, Модификатор);
				ДобавитьТест(
					Тесты, 
					"ТипыРеквизитаСодержатДату",
					ЗаголовокТеста,
					СтрШаблон(
						"""&&ИмяРеквизита"",ЧастиДаты.%1",
						ПараметрЧастиДаты
					),
					Шаблоны
				);
			ИначеЕсли МФПовтИсп.ЭтоНаименованиеТипаДвоичныеДанные(ОписаниеТипаРеквизита.Ключ) Тогда
				// TODO 2025-03-31: Добавить реализацию
			Иначе
				ТипРеквизитаСтрокой = ОписаниеТипаРеквизита.Значение.Получить("Наименование");
				ДобавитьТест(
					Тесты, 
					"ТипыРеквизитаСодержатПрочийТип",
					СтрШаблон(
						"Типы реквизита с именем """"&&ИмяРеквизита"""" содержат прочий тип """"%1""""",
						ТипРеквизитаСтрокой
					),
					СтрШаблон(
						"""&&ИмяРеквизита"",""%1""",
						ТипРеквизитаСтрокой
					),
					Шаблоны
				);
			КонецЕсли;
		КонецЦикла;
		
		Тесты = СтрЗаменить(Тесты, "&&ИмяРеквизита", Элемент.Значение.ИмяРеквизита);
	КонецЦикла;
	Тесты = СокрП(Тесты);
	
	Шаблон = Шаблоны.ИсполняемыеСценарии;
	ТекущиеИсполняемыеСценарии = СтрЗаменить(Шаблон, "&&ИмяТестовогоНабора", Шаблоны.ИмяТестовогоНабораРеквизиты);
	ТекущиеИсполняемыеСценарии = СтрЗаменить(ТекущиеИсполняемыеСценарии, "&&Тесты", Тесты);
	ТекущиеИсполняемыеСценарии = СтрЗаменить(
		ТекущиеИсполняемыеСценарии,
		"&&ИмяПроцедурыПеред",
		"ПодготовкаДанныхДляТестированияРеквизитов"
	);
	
	ИсполняемыеСценарии = СтрШаблон("%1%2%3", ИсполняемыеСценарии, ТекущиеИсполняемыеСценарии, Символы.ПС);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьИсполняемыеСценарииПроверкиЭлементовФормы(ОписаниеМодификацийЭлементов, ИсполняемыеСценарии, Шаблоны)
	Если ОписаниеМодификацийЭлементов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеТиповЭлементовФормыСтроке = МФТестированиеКлиентСерверПовтИсп.СоответствиеТиповЭлементовФормыСтроке();
	
	Тесты = "";
	Для Каждого Элемент Из ОписаниеМодификацийЭлементов Цикл
		// Добавляем тест проверки существования элемента
		ДобавитьТест(
			Тесты, 
			"ЭлементФормыСуществует",
			"Элемент формы с именем """"&&ИмяЭлементаФормы""""",
			"""&&ИмяЭлементаФормы""",
			Шаблоны
		);
		
		// Добавляем тест проверки типа элемента
		ДобавитьТест(
			Тесты, 
			"ТипаЭлементаФормыРавен",
			"Тип элемента с именем """"&&ИмяЭлементаФормы"""" равен """"&&ТипЭлементаФормы""""",
			"""&&ИмяЭлементаФормы"",Тип(""&&ТипЭлементаФормы"")",
			Шаблоны
		);
		Тесты = СтрЗаменить(
			Тесты,
			"&&ТипЭлементаФормы",
			СоответствиеТиповЭлементовФормыСтроке.Получить(Элемент.Значение.ТипЭлемента)
		);
		
		Если Элемент.Значение.ИмяРодителя <> Неопределено Тогда
			// Добавляем тест проверки родителя элемента
			ДобавитьТест(
				Тесты, 
				"ИмяРодителяЭлементаФормыРавно",
				"Имя родителя элемента с именем """"&&ИмяЭлементаФормы"""" равно """"&&ИмяРодителяЭлементаФормы""""",
				"""&&ИмяЭлементаФормы"",""&&ИмяРодителяЭлементаФормы""",
				Шаблоны
			);
			Тесты = СтрЗаменить(
				Тесты,
				"&&ИмяРодителяЭлементаФормы",
				Элемент.Значение.ИмяРодителя
			);
		КонецЕсли;
		
		ОписаниеСвойствЭлементаФормы = МФЭлементыФормыПовтИсп.ОписанияСвойств().Получить(Элемент.Значение.ТипЭлемента);
		Для Каждого СвойствоЭлемента Из Элемент.Значение.ПредставленияСвойствЭлемента Цикл
			ИмяСвойства= СвойствоЭлемента.Ключ;
			ЗначениеСвойства = Элемент.Значение.СвойстваЭлемента[
				ОписаниеСвойствЭлементаФормы.СоответствиеСвойств.Получить(ИмяСвойства)
			];
			Если ТипЗнч(ЗначениеСвойства) = Тип("Цвет") Тогда
				ЗначениеСвойстваЭлементаФормы = "";
			Иначе
				
			КонецЕсли;
			
			ДобавитьТест(
				Тесты, 
				"СвойствоЭлементаФормыРавно",
				"Свойство ""&&ИмяСвойстваЭлементаФормы"" элемента с именем """"&&ИмяЭлементаФормы"""" равно """"&&ПредставлениеЗначенияСвойства""""",
				"""&&ИмяЭлементаФормы"",""&&ИмяСвойстваЭлементаФормы"",&&ЗначениеСвойстваЭлементаФормы",
				Шаблоны
			);
			Тесты = СтрЗаменить(
				Тесты,
				"&&ИмяСвойстваЭлементаФормы",
				ИмяСвойства
			);
			Тесты = СтрЗаменить(
				Тесты,
				"&&ПредставлениеЗначенияСвойства",
				СвойствоЭлемента.Значение
			);
			Тесты = СтрЗаменить(
				Тесты,
				"&&ЗначениеСвойстваЭлементаФормы",
				ЗначениеСвойстваЭлементаФормы
			);
		КонецЦикла;
		
		Тесты = СтрЗаменить(Тесты, "&&ИмяЭлементаФормы", Элемент.Значение.ИмяЭлемента);
	КонецЦикла;
	Тесты = СокрП(Тесты);
	
	Шаблон = Шаблоны.ИсполняемыеСценарии;
	ТекущиеИсполняемыеСценарии = СтрЗаменить(Шаблон, "&&ИмяТестовогоНабора", Шаблоны.ИмяТестовогоНабораЭлементыФормы);
	ТекущиеИсполняемыеСценарии = СтрЗаменить(ТекущиеИсполняемыеСценарии, "&&Тесты", Тесты);
	ТекущиеИсполняемыеСценарии = СтрЗаменить(
		ТекущиеИсполняемыеСценарии,
		"&&ИмяПроцедурыПеред",
		"ПодготовкаДанныхДляТестированияЭлементовФормы"
	);
	
	ИсполняемыеСценарии = СтрШаблон("%1%2%3", ИсполняемыеСценарии, ТекущиеИсполняемыеСценарии, Символы.ПС);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьТест(Тесты, ИмяПроцедуры, ЗаголовокТеста, ПараметрыТестаСтрокой, Шаблоны)
	ШаблонПараметраТеста = Шаблоны.ПараметрТеста;
	ПараметрыТеста = "";
	Параметры = СтрРазделить(ПараметрыТестаСтрокой, ",");
	МассивПараметров = Новый Массив;
	Для Каждого Параметр Из Параметры Цикл
		МассивПараметров.Добавить(
			СтрЗаменить(ШаблонПараметраТеста, "&&ПараметрТеста", Параметр)
		);
	КонецЦикла;
	ПараметрыТеста = СтрСоединить(МассивПараметров, "," + Символы.ПС);
	
	ТекущийТест = СтрЗаменить(Шаблоны.Тест, "&&ИмяПроцедуры", ИмяПроцедуры);
	ТекущийТест = СтрЗаменить(ТекущийТест, "&&ЗаголовокТеста", ЗаголовокТеста);
	ТекущийТест = СтрЗаменить(ТекущийТест, "&&ПараметрыТеста", ПараметрыТеста);
	Тесты = СтрШаблон("%1%2%3", Тесты, ТекущийТест, Символы.ПС);
КонецПроцедуры

#КонецОбласти

#КонецОбласти
