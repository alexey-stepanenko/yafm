//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2025 Alexey A. Stepanenko 
//    * alexey.stepanenko@gmail.com
//    * TG: @AlexeyStepanenko
//    * https://github.com/alexey-stepanenko
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Не Параметры.Свойство("РазличающиесяМакетыОписанийМодификаций") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТаблицуМакетов(
		МакетыКИзменению, 
		Параметры.РазличающиесяМакетыОписанийМодификаций.МакетыКИзменению
	);
	ЗаполнитьТаблицуМакетов(
		МакетыКУдалению, 
		Параметры.РазличающиесяМакетыОписанийМодификаций.МакетыКУдалению
	);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимостьДоступностьЭлементовПриСменеСтраницы(Элементы.Страницы.ТекущаяСтраница);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_МакетыКИзменению

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	УстановитьВидимостьДоступностьЭлементовПриСменеСтраницы(Элементы.Страницы.ТекущаяСтраница);
КонецПроцедуры

&НаКлиенте
Процедура МакетыКИзменениюПриАктивизацииСтроки(Элемент)
	ВывестиМакеты("МакетыКИзменению");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_МакетыКУдалению

&НаКлиенте
Процедура МакетыКУдалениюПриАктивизацииСтроки(Элемент)
	ВывестиМакеты("МакетыКУдалению");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура АктуализироватьМакеты(Команда)
	ВыбранныеМакетыКИзменению = ВыбранныеМакеты(МакетыКИзменению);
	ВыбранныеМакетыКУдалению = ВыбранныеМакеты(МакетыКУдалению);
	Если (ВыбранныеМакетыКИзменению.Количество() + ВыбранныеМакетыКУдалению.Количество()) = 0 Тогда
		// BSLLS:NestedFunctionInParameters-off
		ПоказатьПредупреждение(
			,
			НСтр("ru='Необходимо выбрать хотя бы один макет к изменению или к удалению'"),
			30,
			НСтр("ru='Предупреждение'")
		);
		// BSLLS:NestedFunctionInParameters-on
		
		Возврат;
	КонецЕсли;
	
	АктуализироватьМакетыНаСервере(ВыбранныеМакетыКИзменению, ВыбранныеМакетыКУдалению);
КонецПроцедуры

&НаКлиенте
Процедура МакетыКИзменениюСнятьФлажки(Команда)
	УстановитьЗначениеФлага(МакетыКИзменению, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура МакетыКИзменениюУстановитьФлажки(Команда)
	УстановитьЗначениеФлага(МакетыКИзменению, Истина);
КонецПроцедуры

&НаКлиенте
Процедура МакетыКУдалениюСнятьФлажки(Команда)
	УстановитьЗначениеФлага(МакетыКУдалению, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура МакетыКУдалениюУстановитьФлажки(Команда)
	УстановитьЗначениеФлага(МакетыКУдалению, Истина);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьТаблицуМакетов(ТаблицаМакетов, Источник)
	ТаблицаМакетов.Очистить();
	Для Каждого Элемент Из Источник Цикл
		НоваяСтрока = ТаблицаМакетов.Добавить();
		Для Каждого КлючЗначение Из Элемент Цикл
			НоваяСтрока[КлючЗначение.Ключ] = КлючЗначение.Значение;
		КонецЦикла;
		НоваяСтрока.ФлагВыбора = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступностьЭлементовПриСменеСтраницы(ТекущаяСтраница)
	Элементы.МакетИзКонфигурации.Видимость = (ТекущаяСтраница = Элементы.СтраницаМакетыКИзменению);
	МакетИзКонфигурации = "";
	МакетИзРегистра = "";
	ИмяТаблицы = СтрЗаменить(ТекущаяСтраница.Имя, "Страница", "");
	ВывестиМакеты(ИмяТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеФлага(Таблица, ЗначениеФлага)
	Для Каждого Элемент Из Таблица Цикл
		Элемент.ФлагВыбора = ЗначениеФлага;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВывестиМакеты(ИмяТаблицы)
	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Свойство("МакетИзКонфигурации") Тогда
		МакетИзКонфигурации = ТекущиеДанные.МакетИзКонфигурации;
	КонецЕсли;
	МакетИзРегистра = ТекущиеДанные.МакетИзРегистра;
КонецПроцедуры

&НаКлиенте
Функция ВыбранныеМакеты(Таблица)
	Результат = Новый Массив;
	
	Отбор = Новый Структура("ФлагВыбора", Истина);
	ОтобранныеСтроки = Таблица.НайтиСтроки(Отбор);
	Для Каждого Элемент Из ОтобранныеСтроки Цикл
		Результат.Добавить(Элемент.ИмяМакета);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура АктуализироватьМакетыНаСервере(ВыбранныеМакетыКИзменению, ВыбранныеМакетыКУдалению)
	Для Каждого Макет Из ВыбранныеМакетыКИзменению Цикл
		Попытка
			МакетКИзменениюИзКонфигурации = МФСлужебный.МакетОписанияМодификаций(Макет);
			ТекстМакета = МакетКИзменениюИзКонфигурации.ПолучитьТекст();
			РегистрыСведений.МФМакеты.ОбновитьМакетОписанияМодификаций(
				Макет, 
				ТекстМакета
			);
			СообщениеПользователю = Новый СообщениеПользователю;
			// BSLLS:NestedFunctionInParameters-off
			СообщениеПользователю.Текст = СтрШаблон(
				НСтр("ru='Обновлен текст макета ""%1""'"),
				Макет
			);
			// BSLLS:NestedFunctionInParameters-on
			СообщениеПользователю.Сообщить();
		Исключение
			Инфо = ИнформацияОбОшибке();
			СоставТекстаОшибки = Новый Массив;
			// BSLLS:NestedFunctionInParameters-off
			СоставТекстаОшибки.Добавить(СтрШаблон(
				НСтр("ru='Ошибка обновления текста макета ""%1""'"),
				Макет
			));
			// BSLLS:NestedFunctionInParameters-on
			СоставТекстаОшибки.Добавить(Инфо.Описание);
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = СтрСоединить(СоставТекстаОшибки, Символы.ПС);
			СообщениеПользователю.Сообщить();
		КонецПопытки;
	КонецЦикла;
	
	Для Каждого Макет Из ВыбранныеМакетыКУдалению Цикл
		Попытка
			РегистрыСведений.МФМакеты.УдалитьМакетОписанияМодификаций(Макет);
			СообщениеПользователю = Новый СообщениеПользователю;
			// BSLLS:NestedFunctionInParameters-off
			СообщениеПользователю.Текст = СтрШаблон(
				НСтр("ru='Удален макет ""%1""'"),
				Макет
			);
			// BSLLS:NestedFunctionInParameters-on
			СообщениеПользователю.Сообщить();
		Исключение
			Инфо = ИнформацияОбОшибке();
			СоставТекстаОшибки = Новый Массив;
			// BSLLS:NestedFunctionInParameters-off
			СоставТекстаОшибки.Добавить(СтрШаблон(
				НСтр("ru='Ошибка удаления макета ""%1""'"),
				Макет
			));
			// BSLLS:NestedFunctionInParameters-on
			СоставТекстаОшибки.Добавить(Инфо.Описание);
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = СтрСоединить(СоставТекстаОшибки, Символы.ПС);
			СообщениеПользователю.Сообщить();
		КонецПопытки;
	КонецЦикла;
	
	РазличающиесяМакетыОписанийМодификаций = МФИнструментыРазработчика
		.РазличающиесяМакетыОписанийМодификаций()
	;
	ЗаполнитьТаблицуМакетов(
		МакетыКИзменению, 
		РазличающиесяМакетыОписанийМодификаций.МакетыКИзменению
	);
	ЗаполнитьТаблицуМакетов(
		МакетыКУдалению, 
		РазличающиесяМакетыОписанийМодификаций.МакетыКУдалению
	);
	МакетИзКонфигурации = "";
	МакетИзРегистра = "";
КонецПроцедуры

#КонецОбласти
