//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2025 Alexey A. Stepanenko 
//    * alexey.stepanenko@gmail.com
//    * TG: @AlexeyStepanenko
//    * https://github.com/alexey-stepanenko
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область СлужебныйПрограммныйИнтерфейс

Функция РеквизитСуществуетВДанныхТестирования(ИмяФормы, ИмяРеквизита, Контекст) Экспорт
	Результат = Истина;
	
	ДанныеДляТестированияФормы = ДанныеДляТестированияФормы(ИмяФормы, Контекст);
	Если Не ДанныеДляТестированияФормы.Реквизиты.Свойство(ИмяРеквизита) Тогда
		Результат =Ложь;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ТипРеквизитаСуществуетВДанныхТестирования(ИмяФормы, ИмяРеквизита, ПроверяемыйТипСтрокой, Контекст) Экспорт
	Результат = Истина;
	
	ДанныеДляТестированияФормы = ДанныеДляТестированияФормы(ИмяФормы, Контекст);
	Если Не ДанныеДляТестированияФормы.Реквизиты.Свойство(ИмяРеквизита) Тогда
		СтрокаИсключения = СтрШаблон(
			НСтр("ru='В данных для тестирования формы ""%1"" не обнаружена информация о типах реквизита ""%2""'"),
			ИмяФормы,
			ИмяРеквизита
		);
		
		ВызватьИсключение СтрокаИсключения;
	КонецЕсли;
	
	ОписаниеТиповРеквизита = ДанныеДляТестированияФормы.Реквизиты[ИмяРеквизита].ТипЗначения;
	ОписаниеПроверяемогоТипа = МФОбработкаСтрокСлужебный.ОписаниеТипаИзСтроки(ПроверяемыйТипСтрокой).Тип;
	
	ПроверитьСоставТипов(Результат, ОписаниеПроверяемогоТипа, ОписаниеТиповРеквизита);
	ПроверитьКвалификаторы(Результат, ОписаниеПроверяемогоТипа, ОписаниеТиповРеквизита, МФТестированиеКлиентСерверПовтИсп.ИмяКвалификаторовЧисла());
	ПроверитьКвалификаторы(Результат, ОписаниеПроверяемогоТипа, ОписаниеТиповРеквизита, МФТестированиеКлиентСерверПовтИсп.ИмяКвалификаторовСтроки());
	ПроверитьКвалификаторы(Результат, ОписаниеПроверяемогоТипа, ОписаниеТиповРеквизита, МФТестированиеКлиентСерверПовтИсп.ИмяКвалификаторовДаты());
	ПроверитьКвалификаторы(Результат, ОписаниеПроверяемогоТипа, ОписаниеТиповРеквизита, МФТестированиеКлиентСерверПовтИсп.ИмяКвалификаторовДвоичныхДанных());
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеДляТестированияФормы(ИмяФормы, Контекст)
	Результат = Новый Структура;
	
	ИмяДанныеДляТестирования = МФТестированиеКлиентСерверПовтИсп.ИмяДанныеДляТестирования();
	ДанныеДляТестирования = Контекст[ИмяДанныеДляТестирования];
	АдресДанныхДляТестированияФормы = ДанныеДляТестирования.Получить(ИмяФормы);
	Если АдресДанныхДляТестированияФормы = Неопределено Тогда
		СтрокаИсключения = СтрШаблон(
			МФТестированиеКлиентСерверПовтИсп.ШаблонДанныеДляТестированияФормыНеОбнаружены(),
			ИмяФормы
		);
		
		ВызватьИсключение СтрокаИсключения;
	КонецЕсли;
	
	Результат = ПолучитьИзВременногоХранилища(АдресДанныхДляТестированияФормы);
	
	Возврат Результат;
КонецФункции

Процедура ПроверитьСоставТипов(Результат, ОписаниеПроверяемогоТипа, ОписаниеТиповРеквизита)
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент Из ОписаниеПроверяемогоТипа.Типы() Цикл
		Если Не ОписаниеТиповРеквизита.СодержитТип(Элемент) Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПроверитьКвалификаторы(Результат, ОписаниеПроверяемогоТипа, ОписаниеТиповРеквизита, ИмяКвалификаторов)
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеКвалификаторов = МФТестированиеКлиентСерверПовтИсп.ОписаниеКвалификаторов();
	ОписаниеКвалификатора = ОписаниеКвалификаторов[ИмяКвалификаторов];
	Реквизиты = СтрРазделить(ОписаниеКвалификатора.СравниваемыеПоля, ",");
	Для Каждого Реквизит Из Реквизиты Цикл
		ПорядокСравнения = Новый Массив;
		Если ОписаниеКвалификатора.ПорядокСравнения.Свойство(Реквизит, ПорядокСравнения) Тогда
			ИндексЗначенияПроверяемогоТипа = ПорядокСравнения.Найти(ОписаниеПроверяемогоТипа[ИмяКвалификаторов][Реквизит]);
			Если ИндексЗначенияПроверяемогоТипа = Неопределено Тогда
				ИндексЗначенияПроверяемогоТипа = -1;
			КонецЕсли;
			ИндексЗначенияТиповРеквизита = ПорядокСравнения.Найти(ОписаниеТиповРеквизита[ИмяКвалификаторов][Реквизит]);
			Если ИндексЗначенияТиповРеквизита = Неопределено Тогда
				ИндексЗначенияТиповРеквизита = -1;
			КонецЕсли;
			Если
				(ИндексЗначенияПроверяемогоТипа = -1 И ИндексЗначенияТиповРеквизита = -1)
				Или (ИндексЗначенияПроверяемогоТипа > ИндексЗначенияТиповРеквизита)
			Тогда
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		ИначеЕсли ОписаниеПроверяемогоТипа[ИмяКвалификаторов][Реквизит] > ОписаниеТиповРеквизита[ИмяКвалификаторов][Реквизит] Тогда
			Результат = Ложь;
			Возврат;
		Иначе
			// Пустой блок
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти
