//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2025 Alexey A. Stepanenko 
//    * alexey.stepanenko@gmail.com
//    * TG: @AlexeyStepanenko
//    * https://github.com/alexey-stepanenko
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область СлужебныйПрограммныйИнтерфейс

#Область РазделыСвойствЭлементовФормы

Функция РазделОсновные() Экспорт 
	Возврат НСтр("ru='Основные'");
КонецФункции

Функция РазделДанные() Экспорт 
	Возврат НСтр("ru='Данные'");
КонецФункции

Функция РазделИспользование() Экспорт 
	Возврат НСтр("ru='Использование'");
КонецФункции

Функция РазделОформление() Экспорт 
	Возврат НСтр("ru='Оформление'");
КонецФункции

Функция РазделРасположение() Экспорт
	Возврат НСтр("ru='Расположение'");
КонецФункции

Функция РазделСобытия() Экспорт 
	Возврат НСтр("ru='События'");
КонецФункции

#КонецОбласти

#Область Идентификаторы

Функция ЭтоСтрокаЗаголовкаОписанияМодификаций(Идентификатор) Экспорт
	Идентификаторы = Новый Массив;
	Идентификаторы.Добавить("МОДИФИКАЦИЯФОРМ");
	
	Возврат Идентификаторы.Найти(Идентификатор) <> Неопределено;
КонецФункции

Функция ЭтоИдентификаторФормы(Идентификатор) Экспорт 
	Идентификаторы = Новый Массив;
	Идентификаторы.Добавить("ФОРМА");
	
	Возврат Идентификаторы.Найти(Идентификатор) <> Неопределено;
КонецФункции

#КонецОбласти

#Область БазовыеТипы

Функция ЭтоНаименованиеТипаСтрока(Идентификатор) Экспорт
	Идентификаторы = Новый Массив;
	Идентификаторы.Добавить("СТРОКА");
	
	Возврат (Идентификаторы.Найти(ВРег(Идентификатор)) <> Неопределено)
КонецФункции

Функция ЭтоНаименованиеТипаЧисло(Идентификатор) Экспорт
	Идентификаторы = Новый Массив;
	Идентификаторы.Добавить("ЧИСЛО");
	
	Возврат (Идентификаторы.Найти(ВРег(Идентификатор)) <> Неопределено)
КонецФункции

Функция ЭтоНаименованиеТипаДата(Идентификатор) Экспорт
	Идентификаторы = Новый Массив;
	Идентификаторы.Добавить("ДАТА");
	
	Возврат (Идентификаторы.Найти(ВРег(Идентификатор)) <> Неопределено)
КонецФункции

Функция ЭтоНаименованиеТипаДвоичныеДанные(Идентификатор) Экспорт
	Идентификаторы = Новый Массив;
	Идентификаторы.Добавить("ДВОИЧНЫЕДАННЫЕ");
	
	Возврат (Идентификаторы.Найти(ВРег(Идентификатор)) <> Неопределено)
КонецФункции

#КонецОбласти

#Область ДополнительныеТипы

Функция ТипНатуральноеЧисло() Экспорт
	ЧислоРазрядов = 10;
	ЧислоРазрядовДробнойЧасти = 0;
	КвалификаторЧисла = Новый КвалификаторыЧисла(
		ЧислоРазрядов, 
		ЧислоРазрядовДробнойЧасти, 
		ДопустимыйЗнак.Неотрицательный
	);
	
	Возврат Новый ОписаниеТипов("Число", КвалификаторЧисла);
КонецФункции

Функция ТипБулевоНеопределено() Экспорт
	Возврат "БулевоНеопределено";
КонецФункции

Функция ТипДатаНеопределено() Экспорт
	Возврат "ДатаНеопределено";
КонецФункции

Функция ТипСвязиПараметровВыбора() Экспорт
	Возврат "СвязиПараметровВыбора";
КонецФункции

Функция ТипПараметрыВыбора() Экспорт
	Возврат "ПараметрыВыбора";
КонецФункции

#КонецОбласти

#Область ИдентификаторыЯзыков

Функция РусскийЯзык() Экспорт
	Возврат "ru";
КонецФункции

Функция АнглийскийЯзык() Экспорт
	Возврат "en";
КонецФункции

#КонецОбласти

Функция ЗначенияСтандартныхПеречислений() Экспорт 
	Возврат МФСтандартныеПеречисленияСлужебный.Значения();
КонецФункции

Функция ОбработчикиТиповСтрокОписанияМодификации() Экспорт
	Результат = Новый Соответствие;
	
	// Обработка реквизита
	ДобавитьОбработчикДанных(Результат, МФОбработчикСтрокиРеквизит);
	ДобавитьОбработчикДанных(Результат, МФОбработчикСтрокиТипРеквизита);
	
	// Обработка элемента
	ДобавитьОбработчикДанных(Результат, МФОбработчикСтрокиЭлемент);
	ДобавитьОбработчикДанных(Результат, МФОбработчикСтрокиРодительЭлемента);
	ДобавитьОбработчикДанных(Результат, МФОбработчикСтрокиПоследующийЭлемент);
	ДобавитьОбработчикДанных(Результат, МФОбработчикСтрокиСвойствоЭлемента);
	ДобавитьОбработчикДанных(Результат, МФОбработчикСтрокиСобытиеЭлемента);
	
	// Обработка команды
	ДобавитьОбработчикДанных(Результат, МФОбработчикСтрокиКоманда);
	ДобавитьОбработчикДанных(Результат, МФОбработчикСтрокиЗаголовокКоманды);
	ДобавитьОбработчикДанных(Результат, МФОбработчикСтрокиДействиеКоманды);
	
	// Обработка цвета
	ДобавитьОбработчикДанных(Результат, МФОбработчикСтрокиЦвет);
	
	// Обработка сочетания клавиш
	ДобавитьОбработчикДанных(Результат, МФОбработчикСтрокиСочетаниеКлавиш);
	
	// Обработка рамки
	ДобавитьОбработчикДанных(Результат, МФОбработчикСтрокиРамка);
	
	Возврат Результат;
КонецФункции

Функция ОбработчикиТиповЗначенийСвойств() Экспорт
	Результат = Новый Соответствие;
	
	ДобавитьОбработчикДанных(Результат, МФОбработчикЗначенияСтрока);
	ДобавитьОбработчикДанных(Результат, МФОбработчикЗначенияЧисло);
	ДобавитьОбработчикДанных(Результат, МФОбработчикЗначенияДатаНеопределено);
	
	ДобавитьОбработчикДанных(Результат, МФОбработчикЗначенияСочетаниеКлавиш);
	ДобавитьОбработчикДанных(Результат, МФОбработчикЗначенияЦвет);
	ДобавитьОбработчикДанных(Результат, МФОбработчикЗначенияРамка);
	
	// TODO 2024-12-30: Реализовать обработку значений
	// {{
	ДобавитьОбработчикДанных(Результат, МФОбработчикЗначенияТаблицаФормы);
	ДобавитьОбработчикДанных(Результат, МФОбработчикЗначенияШрифт);
	ДобавитьОбработчикДанных(Результат, МФОбработчикЗначенияКартинка);
	ДобавитьОбработчикДанных(Результат, МФОбработчикЗначенияСписокЗначений);
	ДобавитьОбработчикДанных(Результат, МФОбработчикЗначенияСвязьПоТипу);
	ДобавитьОбработчикДанных(Результат, МФОбработчикЗначенияСвязиПараметровВыбора);
	ДобавитьОбработчикДанных(Результат, МФОбработчикЗначенияПараметрыВыбора);
	// }}
	
	Возврат Результат;
КонецФункции

Функция КоллекцииОбъектовМетаданных() Экспорт
	Результат = Новый Соответствие;
	
	ДобавитьКоллекциюМетаданных(Результат, "ОбщиеМакеты", Метаданные.ОбщиеМакеты, Истина);
	
	ДобавитьКоллекциюМетаданных(Результат, "ПланыОбмена", Метаданные.ПланыОбмена);
	ДобавитьКоллекциюМетаданных(Результат, "ХранилищаНастроек", Метаданные.ХранилищаНастроек);
	ДобавитьКоллекциюМетаданных(Результат, "Справочники", Метаданные.Справочники);
	ДобавитьКоллекциюМетаданных(Результат, "Документы", Метаданные.Документы);
	ДобавитьКоллекциюМетаданных(Результат, "ЖурналыДокументов", Метаданные.ЖурналыДокументов);
	ДобавитьКоллекциюМетаданных(Результат, "Перечисления", Метаданные.Перечисления);
	ДобавитьКоллекциюМетаданных(Результат, "Отчеты", Метаданные.Отчеты);
	ДобавитьКоллекциюМетаданных(Результат, "Обработки", Метаданные.Обработки);
	ДобавитьКоллекциюМетаданных(Результат, "ПланыВидовХарактеристик", Метаданные.ПланыВидовХарактеристик);
	ДобавитьКоллекциюМетаданных(Результат, "ПланыСчетов", Метаданные.ПланыСчетов);
	ДобавитьКоллекциюМетаданных(Результат, "ПланыВидовРасчета", Метаданные.ПланыВидовРасчета);
	ДобавитьКоллекциюМетаданных(Результат, "РегистрыСведений", Метаданные.РегистрыСведений);
	ДобавитьКоллекциюМетаданных(Результат, "РегистрыНакопления", Метаданные.РегистрыНакопления);
	ДобавитьКоллекциюМетаданных(Результат, "РегистрыБухгалтерии", Метаданные.РегистрыБухгалтерии);
	ДобавитьКоллекциюМетаданных(Результат, "РегистрыРасчета", Метаданные.РегистрыРасчета);
	ДобавитьКоллекциюМетаданных(Результат, "БизнесПроцессы", Метаданные.БизнесПроцессы);
	ДобавитьКоллекциюМетаданных(Результат, "Задачи", Метаданные.Задачи);
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьОбработчикДанных(Обработчики, МодульОбработки)
	Идентификаторы = МодульОбработки.Идентификаторы();
	Для Каждого Идентификатор Из Идентификаторы Цикл
		Обработчики.Вставить(Идентификатор, МодульОбработки);
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьКоллекциюМетаданных(Коллекции, ИмяКоллекции, Коллекция, ЭтоОбщая = Ложь)
	ОписаниеКоллекции = Новый Структура;
	
	ОписаниеКоллекции.Вставить("Коллекция", Коллекция);
	ОписаниеКоллекции.Вставить("ЭтоОбщая", ЭтоОбщая);
	
	Коллекции.Вставить(ИмяКоллекции, ОписаниеКоллекции);
КонецПроцедуры

#КонецОбласти
