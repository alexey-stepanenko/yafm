//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2025 Alexey A. Stepanenko 
//    * alexey.stepanenko@gmail.com
//    * TG: @AlexeyStepanenko
//    * https://github.com/alexey-stepanenko
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПодготовкаДанныхДляТестированияРеквизитов(ИмяФормы, Контекст) Экспорт
	АдресДанныхДляТестирования = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	Форма = ПолучитьФормуПоИмени(ИмяФормы, Истина, АдресДанныхДляТестирования);
	
	ИмяДанныеДляТестирования = МФТестированиеКлиентСерверПовтИсп.ИмяДанныеДляТестирования();
	Если Не Контекст.Свойство(ИмяДанныеДляТестирования) Тогда
		Контекст.Вставить(ИмяДанныеДляТестирования, Новый Соответствие);
	КонецЕсли;
	ДанныеДляТестирования = Контекст[ИмяДанныеДляТестирования];
	ДанныеДляТестирования.Вставить(ИмяФормы, АдресДанныхДляТестирования);
	Контекст.Вставить(ИмяДанныеДляТестирования, ДанныеДляТестирования);
КонецПроцедуры

Процедура ПодготовкаДанныхДляТестированияЭлементов(ИмяФормы, Контекст) Экспорт
	Форма = ПолучитьФормуПоИмени(ИмяФормы);
	
	ИмяДанныеДляТестирования = МФТестированиеКлиентСерверПовтИсп.ИмяДанныеДляТестирования();
	Если Не Контекст.Свойство(ИмяДанныеДляТестирования) Тогда
		Контекст.Вставить(ИмяДанныеДляТестирования, Новый Соответствие);
	КонецЕсли;
	ДанныеДляТестирования = Контекст[ИмяДанныеДляТестирования];
	ДанныеДляТестирования.Вставить(ИмяФормы, Форма);
	Контекст.Вставить(ИмяДанныеДляТестирования, ДанныеДляТестирования);
КонецПроцедуры

Процедура РеквизитСуществует(ИмяФормы, ИмяРеквизита, Контекст) Экспорт
	// Дано
	
	СтрокаСообщения = СтрШаблон(
		НСтр("ru='Реквизит с именем ""%1"" отсутствует на форме ""%2""'"),
		ИмяРеквизита,
		ИмяФормы
	);
	
	// Когда
	
	РеквизитСуществуетВДанныхТестирования = МФТестированиеВызовСервера
		.РеквизитСуществуетВДанныхТестирования(ИмяФормы, ИмяРеквизита, Контекст)
	;
	
	// Тогда
	
	ЮТест.ОжидаетЧто(РеквизитСуществуетВДанныхТестирования)
		.Равно(Истина, СтрокаСообщения)
	;
КонецПроцедуры

Процедура ТипРеквизитаСуществует(ИмяФормы, ИмяРеквизита, ПроверяемыйТипСтрокой, Контекст) Экспорт
	// Дано
	
	СтрокаСообщения = СтрШаблон(
		НСтр("ru='Тип ""%1"" отсутствует в списке типов реквизита ""%2""'"),
		ПроверяемыйТипСтрокой,
		ИмяРеквизита
	);
	
	// Когда
	
	ТипРеквизитаСуществуетВДанныхТестирования = МФТестированиеВызовСервера
		.ТипРеквизитаСуществуетВДанныхТестирования(
			ИмяФормы,
			ИмяРеквизита,
			ПроверяемыйТипСтрокой,
			Контекст
		)
	;
	
	// Тогда
	
	ЮТест.ОжидаетЧто(ТипРеквизитаСуществуетВДанныхТестирования)
		.Равно(Истина, СтрокаСообщения)
	;
КонецПроцедуры

Процедура ЭлементСуществует(ИмяФормы, ИмяЭлемента, Контекст) Экспорт
	// Дано
	
	СтрокаСообщения = СтрШаблон(
		НСтр("ru='Элемент с именем ""%1"" отсутствует на форме ""%2""'"),
		ИмяЭлемента,
		ИмяФормы
	);
	
	// Когда
	
	ЭлементСуществуетНаФорме = ЭлементСуществуетНаФорме(ИмяФормы, ИмяЭлемента, Контекст);
	
	// Тогда
	
	ЮТест.ОжидаетЧто(ЭлементСуществуетНаФорме)
		.Равно(Истина, СтрокаСообщения)
	;
КонецПроцедуры

Процедура ТипЭлементаРавен(ИмяФормы, ИмяЭлемента, ПроверяемыйТипСтрокой, Контекст) Экспорт
	// Дано

	Попытка
		ПроверяемыйТип = Тип(ПроверяемыйТипСтрокой);
	Исключение
		СтрокаИсключения = СтрШаблон(
			НСтр("ru='Неизвестный тип ""%1""'"),
			ПроверяемыйТипСтрокой
		);
		
		ВызватьИсключение СтрокаИсключения;
	КонецПопытки;
	
	// Когда
	
	ЭлементФормы = ЭлементФормы(ИмяФормы, ИмяЭлемента, Контекст);
	ТипЭлемента = ТипЗнч(ЭлементФормы);
	
	СтрокаСообщения = СтрШаблон(
		НСтр("ru='Указанный тип ""%1"" элемента с именем ""%2"" не совпадает с ""%3""'"),
		ПроверяемыйТипСтрокой,
		ИмяЭлемента,
		ТипЭлемента
	);
	
	// Тогда
	
	ЮТест.ОжидаетЧто(ТипЭлемента)
		.Равно(ПроверяемыйТип, СтрокаСообщения)
	;
КонецПроцедуры

Процедура РодительЭлементаРавен(ИмяФормы, ИмяЭлемента, ИмяРодителя, Контекст) Экспорт
	// Когда
	
	ЭлементФормы = ЭлементФормы(ИмяФормы, ИмяЭлемента, Контекст);
	РодительЭлемента = ЭлементФормы.Родитель;
	
	ИмяРодителяЭлемента = "ФОРМА";
	Если ТипЗнч(РодительЭлемента) <> Тип("ФормаКлиентскогоПриложения") Тогда
		ИмяРодителяЭлемента = РодительЭлемента.Имя;
	КонецЕсли;
	
	СтрокаСообщения = СтрШаблон(
		НСтр("ru='Указанный родитель ""%1"" элемента с именем ""%2"" не совпадает с ""%3""'"),
		ИмяРодителя,
		ИмяЭлемента,
		ИмяРодителяЭлемента
	);
	
	// Тогда
	
	ЮТест.ОжидаетЧто(ВРег(ИмяРодителя))
		.Равно(ВРег(ИмяРодителяЭлемента), СтрокаСообщения)
	;
КонецПроцедуры

Процедура СвойствоЭлементаРавно(ИмяФормы, ИмяЭлемента, ИмяСвойства, ПроверяемоеЗначение, Контекст) Экспорт
	// Когда
	
	ЭлементФормы = ЭлементФормы(ИмяФормы, ИмяЭлемента, Контекст);
	
	СвойствоЭлемента = Неопределено;
	Попытка
		СвойствоЭлемента = ЭлементФормы[ИмяСвойства];
	Исключение
		СтрокаИсключения = СтрШаблон(
			НСтр("ru='Элемент Свойство ""%1"" не обнаружено у элемента с именем ""%2""'"),
			ИмяСвойства,
			ИмяЭлемента,
		);
		
		ВызватьИсключение СтрокаИсключения;
	КонецПопытки;
	
	СтрокаСообщения = СтрШаблон(
		НСтр("ru='Указанное значение ""%1"" свойства ""%2"" элемента с именем ""%3"" не совпадает с ""%4""'"),
		ПроверяемоеЗначение,
		ИмяСвойства,
		ИмяЭлемента,
		СвойствоЭлемента
	);
	
	// Тогда
	
	ЮТест.ОжидаетЧто(СвойствоЭлемента)
		.Равно(ПроверяемоеЗначение, СтрокаСообщения)
	;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьФормуПоИмени(ИмяФормы, РежимТестирования = Ложь, ДополнительныеПараметры = Неопределено)
	Результат = Неопределено;
	
	ПараметрыФормы = Новый Структура;
	
	Если РежимТестирования Тогда
		ПараметрыФормы.Вставить(
			МФТестированиеКлиентСерверПовтИсп.ИмяПараметраТестирования(),
			Истина
		);
		ПараметрыФормы.Вставить(
			МФТестированиеКлиентСерверПовтИсп.ИмяПараметраАдресДанныхДляТестирования(),
			ДополнительныеПараметры
		);
	КонецЕсли;
	
	Результат = ПолучитьФорму(ИмяФормы, ПараметрыФормы, , Истина);
	
	Возврат Результат;
КонецФункции

Функция ЭлементСуществуетНаФорме(ИмяФормы, ИмяЭлемента, Контекст)
	Результат = Истина;
	
	ИмяДанныеДляТестирования = МФТестированиеКлиентСерверПовтИсп.ИмяДанныеДляТестирования();
	ДанныеДляТестирования = Новый Соответствие;
	Если 
		Не Контекст.Свойство(ИмяДанныеДляТестирования, ДанныеДляТестирования)
		Или (ДанныеДляТестирования.Получить(ИмяФормы) = Неопределено)
	Тогда
		СтрокаИсключения = СтрШаблон(
			МФТестированиеКлиентСерверПовтИсп.ШаблонДанныеДляТестированияФормыНеОбнаружены(),
			ИмяФормы
		);
		
		ВызватьИсключение СтрокаИсключения;
	КонецЕсли;
	
	ТестируемаяФорма = ДанныеДляТестирования.Получить(ИмяФормы);
	Результат = (ТестируемаяФорма.Элементы.Найти(ИмяЭлемента) <> Неопределено);
	
	Возврат Результат;
КонецФункции

Функция ЭлементФормы(ИмяФормы, ИмяЭлемента, Контекст)
	Результат = Неопределено;
	
	ЭлементСуществуетНаФорме = ЭлементСуществуетНаФорме(ИмяФормы, ИмяЭлемента, Контекст);
	Если Не ЭлементСуществуетНаФорме Тогда
		СтрокаИсключения = СтрШаблон(
			МФТестированиеКлиентСерверПовтИсп.ШаблонЭлементСИменемОтсутствуетНаФорме(),
			ИмяЭлемента,
			ИмяФормы
		);
		
		ВызватьИсключение СтрокаИсключения;
	КонецЕсли;
	
	ДанныеДляТестирования = Контекст[МФТестированиеКлиентСерверПовтИсп.ИмяДанныеДляТестирования()];
	ТестируемаяФорма = ДанныеДляТестирования.Получить(ИмяФормы);
	Результат = ТестируемаяФорма.Элементы.Найти(ИмяЭлемента);
	
	Возврат Результат;
КонецФункции

#КонецОбласти
