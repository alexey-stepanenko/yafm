//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2025 Alexey A. Stepanenko 
//    * alexey.stepanenko@gmail.com
//    * TG: @AlexeyStepanenko
//    * https://github.com/alexey-stepanenko
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьФормуПоИмени(ИмяФормы, РежимТестирования = Ложь, АдресВременногоХранилища = Неопределено) Экспорт
	Результат = Неопределено;
	
	ПараметрыФормы = Новый Структура;
	
	Если РежимТестирования Тогда
		ПараметрыФормы.Вставить(
			МФТестированиеКлиентСерверПовтИсп.ИмяПараметраТестирования(),
			Истина
		);
		ПараметрыФормы.Вставить(
			МФТестированиеКлиентСерверПовтИсп.ИмяПараметраАдресДанныхДляТестирования(),
			АдресВременногоХранилища
		);
	КонецЕсли;
	
	Результат = ПолучитьФорму(ИмяФормы, ПараметрыФормы, , Истина);
	
	Возврат Результат;
КонецФункции

Процедура ПодготовкаДанныхДляТестированияРеквизитов(ИмяФормы, Контекст) Экспорт
	АдресДанныхДляТестирования = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	Форма = МФТестированиеКлиент.ПолучитьФормуПоИмени(ИмяФормы, Истина, АдресДанныхДляТестирования);
	
	ИмяДанныеДляТестирования = МФТестированиеКлиентСерверПовтИсп.ИмяДанныеДляТестирования();
	Если Не Контекст.Свойство(ИмяДанныеДляТестирования) Тогда
		Контекст.Вставить(ИмяДанныеДляТестирования, Новый Соответствие);
	КонецЕсли;
	ДанныеДляТестирования = Контекст[ИмяДанныеДляТестирования];
	ДанныеДляТестирования.Вставить(ИмяФормы, АдресДанныхДляТестирования);
	Контекст.Вставить(ИмяДанныеДляТестирования, ДанныеДляТестирования);
КонецПроцедуры

Процедура ПодготовкаДанныхДляТестированияЭлементовФормы(ИмяФормы, Контекст) Экспорт
	Форма = МФТестированиеКлиент.ПолучитьФормуПоИмени(ИмяФормы);
	
	ИмяДанныеДляТестирования = МФТестированиеКлиентСерверПовтИсп.ИмяДанныеДляТестирования();
	Если Не Контекст.Свойство(ИмяДанныеДляТестирования) Тогда
		Контекст.Вставить(ИмяДанныеДляТестирования, Новый Соответствие);
	КонецЕсли;
	ДанныеДляТестирования = Контекст[ИмяДанныеДляТестирования];
	ДанныеДляТестирования.Вставить(ИмяФормы, Форма);
	Контекст.Вставить(ИмяДанныеДляТестирования, ДанныеДляТестирования);
КонецПроцедуры

Процедура РеквизитСуществует(ИмяФормы, ИмяРеквизита, Контекст) Экспорт
	// Дано
	
	СтрокаСообщения = СтрШаблон(
		НСтр("ru='Реквизит с именем ""%1"" отсутствует на форме ""%2""'"),
		ИмяРеквизита,
		ИмяФормы
	);
	
	// Когда
	
	РеквизитСуществуетВДанныхТестирования = МФТестированиеВызовСервера
		.РеквизитСуществуетВДанныхТестирования(ИмяФормы, ИмяРеквизита, Контекст)
	;
	
	// Тогда
	
	ЮТест.ОжидаетЧто(РеквизитСуществуетВДанныхТестирования)
		.Равно(Истина, СтрокаСообщения)
	;
КонецПроцедуры

Процедура ТипыРеквизитаСодержатЧисло(ИмяФормы, ИмяРеквизита, ЗнакЧисла, Разрядность, РазрядностьДробнойЧасти, Контекст) Экспорт
	// Дано
	
	Модификатор = "";
	Если ЗнакЧисла = ДопустимыйЗнак.Неотрицательный Тогда
		Модификатор = "положительное ";
	КонецЕсли;
	СтрокаСообщения = СтрШаблон(
		НСтр("ru='Типы реквизита ""%1"" не содержит %2число разрядностью ""%3"" и дробной частью ""%4""'"),
		ИмяРеквизита,
		Модификатор,
		Формат(Разрядность, "ЧН=0; ЧГ="),
		Формат(РазрядностьДробнойЧасти, "ЧН=0; ЧГ="),
	);
	
	// Когда
	
	ДанныеТестированияСодержатЧисло = МФТестированиеВызовСервера.ДанныеТестированияСодержатЧисло(
		ИмяФормы,
		ИмяРеквизита,
		ЗнакЧисла,
		Разрядность,
		РазрядностьДробнойЧасти,
		Контекст
	);
	
	// Тогда
	
	ЮТест.ОжидаетЧто(ДанныеТестированияСодержатЧисло)
		.Равно(Истина, СтрокаСообщения)
	;
КонецПроцедуры

Процедура ТипыРеквизитаСодержатСтроку(ИмяФормы, ИмяРеквизита, СтратегияУправленияРесурсами, Длина, Контекст) Экспорт
	// Дано
	
	Модификатор = "";
	Если СтратегияУправленияРесурсами = ДопустимаяДлина.Фиксированная Тогда
		Модификатор = "фиксированную ";
	КонецЕсли;
	СтрокаСообщения = СтрШаблон(
		НСтр("ru='Типы реквизита ""%1"" не содержит %2строку длиной ""%3"" символов'"),
		ИмяРеквизита,
		Модификатор,
		Формат(Длина, "ЧН=0; ЧГ=")
	);
	
	// Когда
	
	ДанныеТестированияСодержатСтроку = МФТестированиеВызовСервера.ДанныеТестированияСодержатСтроку(
		ИмяФормы,
		ИмяРеквизита,
		СтратегияУправленияРесурсами,
		Длина,
		Контекст
	);
	
	// Тогда
	
	ЮТест.ОжидаетЧто(ДанныеТестированияСодержатСтроку)
		.Равно(Истина, СтрокаСообщения)
	;
КонецПроцедуры

Процедура ТипыРеквизитаСодержатДату(ИмяФормы, ИмяРеквизита, ВидДаты, Контекст) Экспорт
	// Дано
	
	Если ВидДаты = ЧастиДаты.ДатаВремя Тогда
		Модификатор = "дату и время";
	ИначеЕсли ВидДаты = ЧастиДаты.Время Тогда
		Модификатор = "время";
	Иначе
		Модификатор = "дату";
	КонецЕсли;
	СтрокаСообщения = СтрШаблон(
		НСтр("ru='Типы реквизита ""%1"" не содержит %2'"),
		ИмяРеквизита,
		Модификатор
	);
	
	// Когда
	
	ДанныеТестированияСодержатДату = МФТестированиеВызовСервера.ДанныеТестированияСодержатДату(
		ИмяФормы,
		ИмяРеквизита,
		ВидДаты,
		Контекст
	);
	
	// Тогда
	
	ЮТест.ОжидаетЧто(ДанныеТестированияСодержатДату)
		.Равно(Истина, СтрокаСообщения)
	;
КонецПроцедуры

Процедура ТипыРеквизитаСодержатПрочийТип(ИмяФормы, ИмяРеквизита, ТипСтрокой, Контекст) Экспорт
	// Дано
	
	СтрокаСообщения = СтрШаблон(
		НСтр("ru='Типы реквизита ""%1"" не содержит тип ""%2""'"),
		ИмяРеквизита,
		ТипСтрокой
	);
	
	// Когда
	
	ДанныеТестированияСодержатПрочийТип = МФТестированиеВызовСервера.ДанныеТестированияСодержатПрочийТип(
		ИмяФормы,
		ИмяРеквизита,
		ТипСтрокой,
		Контекст
	);
	
	// Тогда
	
	ЮТест.ОжидаетЧто(ДанныеТестированияСодержатПрочийТип)
		.Равно(Истина, СтрокаСообщения)
	;
КонецПроцедуры

Процедура ЭлементФормыСуществует(ИмяФормы, ИмяЭлемента, Контекст) Экспорт
	// Дано
	
	СтрокаСообщения = СтрШаблон(
		НСтр("ru='Элемент с именем ""%1"" отсутствует на форме ""%2""'"),
		ИмяЭлемента,
		ИмяФормы
	);
	
	// Когда
	
	ЭлементСуществуетНаФорме = ЭлементСуществуетНаФорме(ИмяФормы, ИмяЭлемента, Контекст);
	
	// Тогда
	
	ЮТест.ОжидаетЧто(ЭлементСуществуетНаФорме)
		.Равно(Истина, СтрокаСообщения)
	;
КонецПроцедуры

Процедура ТипаЭлементаФормыРавен(ИмяФормы, ИмяЭлемента, ПроверяемыйТип, Контекст) Экспорт
	// Дано
	
	// Когда
	
	ЭлементФормы = ЭлементФормы(ИмяФормы, ИмяЭлемента, Контекст);
	ТипЭлемента = ТипЗнч(ЭлементФормы);
	
	СтрокаСообщения = СтрШаблон(
		НСтр("ru='Указанный тип ""%1"" элемента с именем ""%2"" не совпадает с ""%3""'"),
		ПроверяемыйТип,
		ИмяЭлемента,
		ТипЭлемента
	);
	
	// Тогда
	
	ЮТест.ОжидаетЧто(ТипЭлемента)
		.Равно(ПроверяемыйТип, СтрокаСообщения)
	;
КонецПроцедуры

Процедура ИмяРодителяЭлементаФормыРавно(ИмяФормы, ИмяЭлемента, ИмяРодителя, Контекст) Экспорт
	// Когда
	
	ЭлементФормы = ЭлементФормы(ИмяФормы, ИмяЭлемента, Контекст);
	РодительЭлемента = ЭлементФормы.Родитель;
	
	ИмяРодителяЭлемента = "ФОРМА";
	Если ТипЗнч(РодительЭлемента) <> Тип("ФормаКлиентскогоПриложения") Тогда
		ИмяРодителяЭлемента = РодительЭлемента.Имя;
	КонецЕсли;
	
	СтрокаСообщения = СтрШаблон(
		НСтр("ru='Указанный родитель ""%1"" элемента с именем ""%2"" не совпадает с ""%3""'"),
		ИмяРодителя,
		ИмяЭлемента,
		ИмяРодителяЭлемента
	);
	
	// Тогда
	
	ЮТест.ОжидаетЧто(ВРег(ИмяРодителя))
		.Равно(ВРег(ИмяРодителяЭлемента), СтрокаСообщения)
	;
КонецПроцедуры

//Процедура СвойствоЭлементаРавно(ИмяФормы, ИмяЭлемента, ИмяСвойства, ПроверяемоеЗначение, Контекст) Экспорт
//	// Когда
//	
//	ЭлементФормы = ЭлементФормы(ИмяФормы, ИмяЭлемента, Контекст);
//	
//	СвойствоЭлемента = Неопределено;
//	Попытка
//		СвойствоЭлемента = ЭлементФормы[ИмяСвойства];
//	Исключение
//		СтрокаИсключения = СтрШаблон(
//			НСтр("ru='Элемент Свойство ""%1"" не обнаружено у элемента с именем ""%2""'"),
//			ИмяСвойства,
//			ИмяЭлемента,
//		);
//		
//		ВызватьИсключение СтрокаИсключения;
//	КонецПопытки;
//	
//	СтрокаСообщения = СтрШаблон(
//		НСтр("ru='Указанное значение ""%1"" свойства ""%2"" элемента с именем ""%3"" не совпадает с ""%4""'"),
//		ПроверяемоеЗначение,
//		ИмяСвойства,
//		ИмяЭлемента,
//		СвойствоЭлемента
//	);
//	
//	// Тогда
//	
//	ЮТест.ОжидаетЧто(СвойствоЭлемента)
//		.Равно(ПроверяемоеЗначение, СтрокаСообщения)
//	;
//КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЭлементСуществуетНаФорме(ИмяФормы, ИмяЭлемента, Контекст)
	Результат = Истина;
	
	ИмяДанныеДляТестирования = МФТестированиеКлиентСерверПовтИсп.ИмяДанныеДляТестирования();
	ДанныеДляТестирования = Новый Соответствие;
	Если 
		Не Контекст.Свойство(ИмяДанныеДляТестирования, ДанныеДляТестирования)
		Или (ДанныеДляТестирования.Получить(ИмяФормы) = Неопределено)
	Тогда
		СтрокаИсключения = СтрШаблон(
			МФТестированиеКлиентСерверПовтИсп.ШаблонДанныеДляТестированияФормыНеОбнаружены(),
			ИмяФормы
		);
		
		ВызватьИсключение СтрокаИсключения;
	КонецЕсли;
	
	ТестируемаяФорма = ДанныеДляТестирования.Получить(ИмяФормы);
	Результат = (ТестируемаяФорма.Элементы.Найти(ИмяЭлемента) <> Неопределено);
	
	Возврат Результат;
КонецФункции

Функция ЭлементФормы(ИмяФормы, ИмяЭлемента, Контекст)
	Результат = Неопределено;
	
	ЭлементСуществуетНаФорме = ЭлементСуществуетНаФорме(ИмяФормы, ИмяЭлемента, Контекст);
	Если Не ЭлементСуществуетНаФорме Тогда
		СтрокаИсключения = СтрШаблон(
			МФТестированиеКлиентСерверПовтИсп.ШаблонЭлементСИменемОтсутствуетНаФорме(),
			ИмяЭлемента,
			ИмяФормы
		);
		
		ВызватьИсключение СтрокаИсключения;
	КонецЕсли;
	
	ДанныеДляТестирования = Контекст[МФТестированиеКлиентСерверПовтИсп.ИмяДанныеДляТестирования()];
	ТестируемаяФорма = ДанныеДляТестирования.Получить(ИмяФормы);
	Результат = ТестируемаяФорма.Элементы.Найти(ИмяЭлемента);
	
	Возврат Результат;
КонецФункции

#КонецОбласти
