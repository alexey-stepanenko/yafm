//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2025 Alexey A. Stepanenko 
//    * alexey.stepanenko@gmail.com
//    * TG: @AlexeyStepanenko
//    * https://github.com/alexey-stepanenko
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область СлужебныйПрограммныйИнтерфейс

// Первоначальное заполнение реквизитов протокола.
// 
// Параметры:
//  Протокол - Структура - Описание протокола. См. дополнительно описание возвращаемого значения
//                         функции МФСлужебный.Протокол.
// 
Процедура ИнициализироватьПротокол(Протокол) Экспорт
	ИнициализироватьДанныеПротокола(Протокол);
	ИнициализироватьДополнительныеПараметры(Протокол);
	УстановитьПрерватьМодификациюПриОшибке(Протокол);
	УстановитьПрерватьВыводФормыПриОшибкахМодификации(Протокол);
КонецПроцедуры

// TODO 2025-02-04: Доделать описание
// Формирование записи в протоколе модификации
// 
// Параметры:
//  Протокол - Структура - Описание протокола. См. дополнительно описание возвращаемого значения
//                         функции МФСлужебный.Протокол.
//  ОписаниеОшибки - Структура - Описание ошибки.
//
Процедура ОбработатьОписаниеОшибки(Протокол, ОписаниеОшибки) Экспорт
	СоставСтрокиПротокола = Новый Массив;
	ОбработкаОписанияОшибки = МФГенераторПротоколаПовтИсп.ОбработкаОписанияОшибки();
	Для Каждого Поле Из ОбработкаОписанияОшибки.Порядок Цикл
		Если
			(Не ОписаниеОшибки.Свойство(Поле))
			Или (ОписаниеОшибки[Поле] = Неопределено)
		Тогда
			Продолжить;
		КонецЕсли;
		Если ОбработкаОписанияОшибки.ОписанияПолей[Поле].Вывод = МФГенераторПротоколаПовтИсп.ВыводВНовойСтроке() Тогда // BSLLS:LineLength-off
			Шаблон = "%1" + Символы.ПС + "%2";
		Иначе
			Шаблон = "%1 %2";
		КонецЕсли;
		ЭлементСтрокиПротокола = СтрШаблон(
			Шаблон,
			ОбработкаОписанияОшибки.ОписанияПолей[Поле].Представление,
			ОписаниеОшибки[Поле]
		);
		СоставСтрокиПротокола.Добавить(ЭлементСтрокиПротокола);
	КонецЦикла;
	СтрокаПротокола = СтрСоединить(СоставСтрокиПротокола, Символы.ПС + "----------" + Символы.ПС);
	Протокол.ДанныеПротокола.Добавить(СтрокаПротокола);
КонецПроцедуры

Процедура ДобавитьСтрокуВПротокол(Протокол, Знач СтрокаПротокола) Экспорт
	МФГенераторПротоколаПереопределяемый.ДоработатьСтрокуПротокола(Протокол, СтрокаПротокола);
	
	Протокол.ДанныеПротокола.Добавить(СтрокаПротокола);
КонецПроцедуры

Процедура СформироватьТекстПротокола(Протокол, Форма) Экспорт
	Если
		Не (
			Протокол.ДополнительныеПараметры.ВывестиВЖурналРегистрации
			И Протокол.ДополнительныеПараметры.ВывестиНаЭкран
		)
	Тогда
		Возврат;
	КонецЕсли;
	
	ТекстПротокола = СтрСоединить(Протокол.ДанныеПротокола, Символы.ПС + "==========" + Символы.ПС);
	МФГенераторПротоколаПереопределяемый.СформироватьТекстПротокола(ТекстПротокола, Протокол, Форма);
	
	Если Протокол.ДополнительныеПараметры.ВывестиВЖурналРегистрации Тогда
		ВывестиВЖурналРегистрации(ТекстПротокола, Форма);
	КонецЕсли;
	Если Протокол.ДополнительныеПараметры.ВывестиНаЭкран Тогда
		ВывестиНаЭкран(ТекстПротокола, Форма);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьДанныеПротокола(Протокол)
	Протокол.ДанныеПротокола = Новый Массив;
	
	МФГенераторПротоколаПереопределяемый.ИнициализироватьДанныеПротокола(Протокол);
КонецПроцедуры

Процедура ИнициализироватьДополнительныеПараметры(Протокол)
	Протокол.ДополнительныеПараметры = Новый Структура;
	Протокол.ДополнительныеПараметры.Вставить("ВывестиВЖурналРегистрации", Истина);
	Протокол.ДополнительныеПараметры.Вставить("ВывестиНаЭкран", Ложь);
	
	МФГенераторПротоколаПереопределяемый.ИнициализироватьДополнительныеПараметры(Протокол);
КонецПроцедуры

Процедура УстановитьПрерватьМодификациюПриОшибке(Протокол)
	Протокол.ПрерватьМодификациюПриОшибке = Ложь;
	
	МФГенераторПротоколаПереопределяемый
		.УстановитьПрерватьМодификациюПриОшибке(Протокол)
	;
КонецПроцедуры

Процедура УстановитьПрерватьВыводФормыПриОшибкахМодификации(Протокол)
	Протокол.ПрерватьВыводФормыПриОшибкахМодификации = Ложь;
	
	МФГенераторПротоколаПереопределяемый
		.УстановитьПрерватьВыводФормыПриОшибкахМодификации(Протокол)
	;
КонецПроцедуры

Процедура ВывестиВЖурналРегистрации(ТекстПротокола, Форма)
	ИмяСобытия = ИмяСобытия();
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытия,
		УровеньЖурналаРегистрации.Ошибка,
		,
		Форма.ИмяФормы,
		ТекстПротокола
	);
КонецПроцедуры

Функция ИмяСобытия()
	Результат = НСтр("ru='МодификацияФорм'");
	
	Возврат Результат;
КонецФункции

Процедура ВывестиНаЭкран(ТекстПротокола, Форма)
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстПротокола;
	Сообщение.Сообщить();
КонецПроцедуры

#КонецОбласти
