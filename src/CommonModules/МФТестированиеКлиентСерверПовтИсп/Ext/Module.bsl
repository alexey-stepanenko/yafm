//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2025 Alexey A. Stepanenko 
//    * alexey.stepanenko@gmail.com
//    * TG: @AlexeyStepanenko
//    * https://github.com/alexey-stepanenko
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область СлужебныйПрограммныйИнтерфейс

#Область Тестирование

Функция ИмяПараметраТестирования() Экспорт
	Возврат "__YAFM_ЭтоТестирование";
КонецФункции

Функция ИмяПараметраАдресДанныхДляТестирования() Экспорт
	Возврат "__YAFM_АдресДанныхДляТестирования";
КонецФункции

Функция ИмяДанныеДляТестирования() Экспорт
	Возврат "__YAFM_ДанныеДляТестирования";
КонецФункции

#КонецОбласти

#Область Квалификаторы

Функция ИмяКвалификаторовЧисла() Экспорт
	Возврат "КвалификаторыЧисла";
КонецФункции

Функция ИмяКвалификаторовСтроки() Экспорт
	Возврат "КвалификаторыСтроки";
КонецФункции

Функция ИмяКвалификаторовДаты() Экспорт
	Возврат "КвалификаторыДаты";
КонецФункции

Функция ИмяКвалификаторовДвоичныхДанных() Экспорт
	Возврат "КвалификаторыДвоичныхДанных";
КонецФункции

Функция ОписаниеКвалификаторов() Экспорт
	Результат = Новый Структура;
	Результат.Вставить(ИмяКвалификаторовЧисла(), ОписаниеКвалификаторовЧисла());
	Результат.Вставить(ИмяКвалификаторовСтроки(), ОписаниеКвалификаторовСтроки());
	Результат.Вставить(ИмяКвалификаторовДаты(), ОписаниеКвалификаторовДаты());
	Результат.Вставить(ИмяКвалификаторовДвоичныхДанных(), ОписаниеКвалификаторовДвоичныхДанных());
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область Шаблоны

Функция ШаблонДанныеДляТестированияФормыНеОбнаружены() Экспорт
	Возврат НСтр("ru='Данные для тестирования формы ""%1"" не обнаружены'");
КонецФункции

Функция ШаблонЭлементСИменемОтсутствуетНаФорме() Экспорт
	Возврат НСтр("ru='Элемент с именем ""%1"" отсутствует на форме ""%2""'");
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОписаниеКвалификаторовЧисла()
	// Порядок сравнения: Чем больше индекс - тем больше значение, пример:
	//   ПорядокСравненияДопустимыйЗнак = Новый Массив();
	//   ПорядокСравненияДопустимыйЗнак.Добавить(ДопустимыйЗнак.Неотрицательный);
	//   ПорядокСравненияДопустимыйЗнак.Добавить(ДопустимыйЗнак.Любой);
	// в этом случае ДопустимыйЗнак.Любой больше, чем ДопустимыйЗнак.Неотрицательный
	Результат = Новый Структура;
	
	СравниваемыеПоля = "ДопустимыйЗнак,Разрядность,РазрядностьДробнойЧасти";
	
	ПорядокСравненияДопустимыйЗнак = Новый Массив();
	ПорядокСравненияДопустимыйЗнак.Добавить(ДопустимыйЗнак.Любой);
	ПорядокСравненияДопустимыйЗнак.Добавить(ДопустимыйЗнак.Неотрицательный);
	ПорядокСравнения = Новый Структура;
	ПорядокСравнения.Вставить("ДопустимыйЗнак", ПорядокСравненияДопустимыйЗнак);
	
	Результат = ОписаниеКвалификатора(СравниваемыеПоля, ПорядокСравнения);
	
	Возврат Результат;
КонецФункции

Функция ОписаниеКвалификаторовСтроки()
	Результат = Новый Структура;
	
	СравниваемыеПоля = "Длина,ДопустимаяДлина";
	ПорядокСравненияДопустимаяДлина = Новый Массив();
	ПорядокСравненияДопустимаяДлина.Добавить(ДопустимаяДлина.Фиксированная);
	ПорядокСравненияДопустимаяДлина.Добавить(ДопустимаяДлина.Переменная);
	ПорядокСравнения = Новый Структура;
	ПорядокСравнения.Вставить("ДопустимаяДлина", ПорядокСравненияДопустимаяДлина);
	
	Результат = ОписаниеКвалификатора(СравниваемыеПоля, ПорядокСравнения);
	
	Возврат Результат;
КонецФункции

Функция ОписаниеКвалификаторовДаты()
	Результат = Новый Структура;
	
	СравниваемыеПоля = "ЧастиДаты";
	
	ПорядокСравненияЧастиДаты = Новый Массив();
	ПорядокСравненияЧастиДаты.Добавить(ЧастиДаты.ДатаВремя);
	ПорядокСравнения = Новый Структура;
	ПорядокСравнения.Вставить("ЧастиДаты", ПорядокСравненияЧастиДаты);
	
	Результат = ОписаниеКвалификатора(СравниваемыеПоля, ПорядокСравнения);
	
	Возврат Результат;
КонецФункции

Функция ОписаниеКвалификаторовДвоичныхДанных()
	Результат = Новый Структура;
	
	СравниваемыеПоля = "Длина,ДопустимаяДлина";
	ПорядокСравненияДопустимаяДлина = Новый Массив();
	ПорядокСравненияДопустимаяДлина.Добавить(ДопустимаяДлина.Фиксированная);
	ПорядокСравненияДопустимаяДлина.Добавить(ДопустимаяДлина.Переменная);
	ПорядокСравнения = Новый Структура;
	ПорядокСравнения.Вставить("ДопустимаяДлина", ПорядокСравненияДопустимаяДлина);
	
	Результат = ОписаниеКвалификатора(СравниваемыеПоля, ПорядокСравнения);
	
	Возврат Результат;
КонецФункции

Функция ОписаниеКвалификатора(СравниваемыеПоля, ПорядокСравнения)
	Результат = Новый Структура;
	
	Результат.Вставить("СравниваемыеПоля", СравниваемыеПоля);
	Результат.Вставить("ПорядокСравнения", ПорядокСравнения);
	
	Возврат Результат;
КонецФункции

#КонецОбласти
