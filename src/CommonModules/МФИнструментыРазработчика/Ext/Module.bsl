//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2025 Alexey A. Stepanenko 
//    * alexey.stepanenko@gmail.com
//    * TG: @AlexeyStepanenko
//    * https://github.com/alexey-stepanenko
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область СлужебныйПрограммныйИнтерфейс

Процедура АктуализироватьДанныеВКэше() Экспорт
	РегистрыСведений.МФМакеты.АктуализироватьДанныеВКэше();
КонецПроцедуры

Функция ВсеДанныеВКэшеАктуальны() Экспорт
	Возврат РегистрыСведений.МФМакеты.ВсеДанныеВКэшеАктуальны();
КонецФункции

Процедура СформироватьДеревоФорм(ДеревоФорм) Экспорт
	СформироватьВеткуОбщихФорм(ДеревоФорм);
	// BSLLS:LineLength-off
	СформироватьВеткуКоллекцииМетаданных(ДеревоФорм, "Справочники", "Справочники", "Справочник", БиблиотекаКартинок.Справочник);
	СформироватьВеткуКоллекцииМетаданных(ДеревоФорм, "Документы", "Документы", "Документ", БиблиотекаКартинок.Документ);
	СформироватьВеткуКоллекцииМетаданных(ДеревоФорм, "Журналы документов", "ЖурналыДокументов", "ЖурналДокументов", БиблиотекаКартинок.ЖурналДокументов);
	СформироватьВеткуКоллекцииМетаданных(ДеревоФорм, "Перечисления", "Перечисления", "Перечисление", БиблиотекаКартинок.Перечисление);
	СформироватьВеткуКоллекцииМетаданных(ДеревоФорм, "Отчеты", "Отчеты", "Отчет", БиблиотекаКартинок.Отчет);
	СформироватьВеткуКоллекцииМетаданных(ДеревоФорм, "Обработки", "Обработки", "Обработка", БиблиотекаКартинок.Обработка);
	СформироватьВеткуКоллекцииМетаданных(ДеревоФорм, "Планы видов характеристик", "ПланыВидовХарактеристик", "ПланВидовХарактеристик", БиблиотекаКартинок.ПланВидовХарактеристик);
	СформироватьВеткуКоллекцииМетаданных(ДеревоФорм, "Планы счетов", "ПланыСчетов", "ПланСчетов", БиблиотекаКартинок.ПланСчетов);
	СформироватьВеткуКоллекцииМетаданных(ДеревоФорм, "Планы видов расчета", "ПланыВидовРасчета", "ПланВидовРасчета", БиблиотекаКартинок.ПланВидовРасчета);
	СформироватьВеткуКоллекцииМетаданных(ДеревоФорм, "Регистры сведений", "РегистрыСведений", "РегистрСведений", БиблиотекаКартинок.РегистрСведений);
	СформироватьВеткуКоллекцииМетаданных(ДеревоФорм, "Регистры накопления", "РегистрыНакопления", "РегистрНакопления", БиблиотекаКартинок.РегистрНакопления);
	СформироватьВеткуКоллекцииМетаданных(ДеревоФорм, "Регистры бухгалтерии", "РегистрыБухгалтерии", "РегистрБухгалтерии", БиблиотекаКартинок.РегистрБухгалтерии);
	СформироватьВеткуКоллекцииМетаданных(ДеревоФорм, "Регистры расчета", "РегистрыРасчета", "РегистрРасчета", БиблиотекаКартинок.РегистрРасчета);
	СформироватьВеткуКоллекцииМетаданных(ДеревоФорм, "Бизнес-процессы", "БизнесПроцессы", "БизнесПроцесс", БиблиотекаКартинок.БизнесПроцесс);
	СформироватьВеткуКоллекцииМетаданных(ДеревоФорм, "Задачи", "Задачи", "Задача", БиблиотекаКартинок.Задача);
	// BSLLS:LineLength-on
КонецПроцедуры

Функция СформироватьШаблоныПоМакету(Макет) Экспорт
	Результат = Новый Структура;
	
	ИмяШаблона = "";
	СоставШаблона = Новый Массив;
	Для Сч = 1 По Макет.КоличествоСтрок() Цикл
		СтрокаШаблона = Макет.ПолучитьСтроку(Сч);
		Если Лев(СтрокаШаблона, 1) = "$" Тогда
			ЗапомнитьШаблон(Результат, ИмяШаблона, СоставШаблона);
			ИмяШаблона = Прав(СтрокаШаблона, СтрДлина(СтрокаШаблона) - 1);
			СоставШаблона.Очистить();
		ИначеЕсли Не ПустаяСтрока(ИмяШаблона) Тогда
			СоставШаблона.Добавить(СтрокаШаблона);
		Иначе
			// Пустой блок
		КонецЕсли;
	КонецЦикла;
	Если СоставШаблона.Количество() > 0 Тогда
		ЗапомнитьШаблон(Результат, ИмяШаблона, СоставШаблона);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДеревоФорм

Процедура СформироватьВеткуОбщихФорм(Родитель)
	Строки = Родитель.Строки;
	
	СтрокаОбщие = Строки.Добавить();
	СтрокаОбщие.Имя = "Общие";
	СтрокаОбщие.Картинка = БиблиотекаКартинок.МФМетаданныеОбщие;
	СтрокаОбщие.ВеткаСформирована = Истина;
	СтрокаОбщие.ВыборРазрешен = Ложь;
	
	СтрокаОбщиеФормы = СтрокаОбщие.Строки.Добавить();
	СтрокаОбщиеФормы.Имя = "Общие формы";
	СтрокаОбщиеФормы.Картинка = БиблиотекаКартинок.Форма;
	СтрокаОбщиеФормы.ВыборРазрешен = Ложь;
	Если Метаданные.ОбщиеФормы.Количество() = 0 Тогда
		СтрокаОбщиеФормы.ВеткаСформирована = Истина;
	Иначе
		СтрокаОбщиеФормы.ИмяКоллекции = "ОбщиеФормы";
		ФейковаяСтрока = СтрокаОбщиеФормы.Строки.Добавить();
	КонецЕсли;
КонецПроцедуры

Процедура СформироватьВеткуКоллекцииМетаданных(Родитель, ИмяВетки, ИмяКоллекции, ИмяОбъекта, Картинка)
	Строки = Родитель.Строки;
	НоваяСтрока = Строки.Добавить();
	НоваяСтрока.Имя = ИмяВетки;
	НоваяСтрока.Картинка = Картинка;
	Если Метаданные[ИмяКоллекции].Количество() = 0 Тогда
		НоваяСтрока.ВеткаСформирована = Истина;
	Иначе
		НоваяСтрока.ИмяКоллекции = ИмяКоллекции;
		ФейковаяСтрока = НоваяСтрока.Строки.Добавить();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

Процедура ЗапомнитьШаблон(Шаблоны, ИмяШаблона, СоставШаблона)
	Если
		ПустаяСтрока(ИмяШаблона)
		Или СоставШаблона.Количество() = 0
	Тогда
		Возврат;
	КонецЕсли;
	
	ТекстШаблона = СокрП(СтрСоединить(СоставШаблона, Символы.ПС));
	Шаблоны.Вставить(ИмяШаблона, ТекстШаблона);
КонецПроцедуры

#КонецОбласти
