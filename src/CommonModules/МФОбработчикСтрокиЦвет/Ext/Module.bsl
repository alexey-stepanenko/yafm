//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2025 Alexey A. Stepanenko 
//    * alexey.stepanenko@gmail.com
//    * TG: @AlexeyStepanenko
//    * https://github.com/alexey-stepanenko
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область СлужебныйПрограммныйИнтерфейс

Функция Идентификаторы() Экспорт
	Идентификаторы = Новый Массив;
	Идентификаторы.Добавить("ЦВЕТ");
	
	Возврат Идентификаторы;
КонецФункции

// Обработчик строки, описывающий цвет
//
// Параметры:
//  ОписаниеМодификаций - Структура - См. подробнее МодификацияФормСлужебный.НовыйОписаниеМодификаций()
//  Поля - Массив - значения полей из строки описания модификации формы. Ожидается минимум 3 элемента массива:
//    * [0] - Идентификатор строки. Может содержать значения из массива, возвращаемого функцией Идентификаторы().
//    * [1] - Имя цвета.
//    * [2] - Описание цвета. Используются несколько нотаций:
//            * Авто, Auto - Установка авто цвета. Дополнительно см. синтакс помощник ВидЦвета.АвтоЦвет
//            * R,G,B      - Указание значений компонентов цвета в десятичной системе.
//                           Например, "190,136,18"
//            * #RRGGBB    - Указание значений компонентов цвета в шестнадцатиречной системе. 
//                           Например, "#BE8812"
//
// Пример строки:
// ЦВЕТ	АвтоЦвет	Авто
// ЦВЕТ	Красный	255,0,0
// ЦВЕТ	ЦветКнопки	#BE8812
//
Процедура Обработать(ОписаниеМодификаций, Поля) Экспорт
	МинимальноеКоличествоПолей = 3;
	КоличествоПолей = Поля.Количество();
	МФОбработкаСтрокСлужебный.ПроверитьКоличествоПолейСтроки(КоличествоПолей, МинимальноеКоличествоПолей);
	
	СоставПолейСтроки = МФОбработкаСтрокСлужебный.СоставПолейСтроки(
		Поля, 
		"Имя,ПредставлениеЗначения"
	);
	
	ПредставлениеЗначения = СоставПолейСтроки.ПредставлениеЗначения;
	ЗначениеЦвета = Неопределено;
	
	ЗначениеЦвета = ЗначениеЦвета(ПредставлениеЗначения);
	
	//ИдентификаторТипаОписанияЦвета = ВРег(СоставПолейСтроки.ТипОписанияЦвета);
	//Если МФОбработчикСтрокиЦветПовтИсп.ЭтоИдентификаторАвто(ИдентификаторТипаОписанияЦвета) Тогда
	//	ОбработатьТипАвто(ПредставлениеЗначения, ЗначениеЦвета);
	//ИначеЕсли МФОбработчикСтрокиЦветПовтИсп.ЭтоИдентификаторDec(ИдентификаторТипаОписанияЦвета) Тогда
	//	ОбработатьТипDec(ПредставлениеЗначения, ЗначениеЦвета);
	//ИначеЕсли МФОбработчикСтрокиЦветПовтИсп.ЭтоИдентификаторHex(ИдентификаторТипаОписанияЦвета) Тогда
	//	ОбработатьТипHex(ПредставлениеЗначения, ЗначениеЦвета);
	//Иначе
	//	// BSLLS:NestedFunctionInParameters-off
	//	ТекстИсключения = СтрШаблон(
	//		НСтр("ru='Неизвестный тип описания цвета: ""%1""'"),
	//		СоставПолейСтроки.ТипОписанияЦвета
	//	);
	//	// BSLLS:NestedFunctionInParameters-on
	//	
	//	ВызватьИсключение ТекстИсключения;
	//КонецЕсли;
	
	ОписаниеЦвета = Новый Структура;
	ОписаниеЦвета.Вставить("ИмяЦвета", СоставПолейСтроки.Имя);
	ОписаниеЦвета.Вставить("ЗначениеЦвета", ЗначениеЦвета);
	ОписаниеМодификаций.Цвета.Вставить(
		СоставПолейСтроки.Идентификатор,
		ОписаниеЦвета
	);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗначениеЦвета(ПредставлениеЗначения)
	Результат = Новый Цвет;
	
	КомпонентыЦвета = Новый Массив;
	Если
		МФОбработчикЗначенияЦветПовтИсп.ЭтоИдентификаторАвто(
			МФОбработкаСтрокСлужебный.Идентификатор(ПредставлениеЗначения)
		)
	Тогда
		Результат = МФОбработчикЗначенияЦветПовтИсп.ЦветАвто();
	ИначеЕсли ЭтоТипDec(ПредставлениеЗначения, КомпонентыЦвета) Тогда
		Для Каждого Элемент Из КомпонентыЦвета Цикл
			Если Элемент < 0 Или Элемент > 255 Тогда // BSLLS:MagicNumber-off
				// BSLLS:NestedFunctionInParameters-off
				ТекстИсключения = СтрШаблон(
					НСтр("ru='Компонент цвета ""%1"" должен быть в диапазоне от 0 до 255'"),
					Формат(Элемент, "ЧН=; ЧГ=")
				);
				// BSLLS:NestedFunctionInParameters-on
				
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
		КонецЦикла;
		// BSLLS:StyleElementConstructors-off
		Результат = Новый Цвет(
			КомпонентыЦвета[0], // Красный
			КомпонентыЦвета[1], // Зеленый
			КомпонентыЦвета[2]  // Синий
		);
		// BSLLS:StyleElementConstructors-on
	ИначеЕсли ЭтоТипHex(ПредставлениеЗначения, КомпонентыЦвета) Тогда
		Результат = Новый Цвет(
			КомпонентыЦвета[0], // Красный
			КомпонентыЦвета[1], // Зеленый
			КомпонентыЦвета[2]  // Синий
		);
	Иначе
		// BSLLS:NestedFunctionInParameters-off
		ТекстИсключения = СтрШаблон(
			НСтр("ru='Значение цвета ""%1"" не является числом в шестнадцатеричном виде'"),
			ПредставлениеЗначения
		);
		// BSLLS:NestedFunctionInParameters-on
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	
	Возврат Результат;
КонецФункции

Функция ЭтоТипDec(ПредставлениеЗначения, КомпонентыЦвета) // BSLLS:LatinAndCyrillicSymbolInWord-off
	Состав = СтрРазделить(ПредставлениеЗначения, ",");
	Если Состав.Количество() <> 3 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Компоненты = Новый Массив;
	Для Каждого Элемент Из Состав Цикл
		КомпонентЦвета = МФПовтИсп.ТипНатуральноеЧисло().ПривестиЗначение(Элемент);
		Если Формат(КомпонентЦвета, "ЧН=0; ЧГ=") <> Элемент Тогда
			Возврат Ложь;
		КонецЕсли;
		Компоненты.Добавить(КомпонентЦвета);
	КонецЦикла;
	
	КомпонентыЦвета.Очистить();
	Для Каждого Элемент Из Компоненты Цикл
		КомпонентыЦвета.Добавить(Элемент);
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

Функция ЭтоТипHex(ПредставлениеЗначения, КомпонентыЦвета) // BSLLS:LatinAndCyrillicSymbolInWord-off
	Если
		Лев(ПредставлениеЗначения, 1) <> "#"
		Или (СтрДлина(ПредставлениеЗначения) <> 7)
	Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Буфер = ПолучитьБуферДвоичныхДанныхИзHexСтроки(ПредставлениеЗначения);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	КомпонентыЦвета.Очистить();
	Для Сч = 0 По 2 Цикл
		КомпонентыЦвета.Добавить(Буфер[Сч]);
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

#Область Удалить

Процедура ОбработатьТипDec(ПредставлениеЗначения, ЗначениеЦвета) // BSLLS:LatinAndCyrillicSymbolInWord-off
	СимволРазделитель = ",";
	СоставПредставленияЦвета = СтрРазделить(ПредставлениеЗначения, СимволРазделитель);
	КоличествоКомпонентов = СоставПредставленияЦвета.Количество();
	Если КоличествоКомпонентов <> 3 Тогда // BSLLS:MagicNumber-off
		// BSLLS:NestedFunctionInParameters-off
		ТекстИсключения = СтрШаблон(
			НСтр("ru='Неправильное количество компонентов цвета. Ожидалось 3, обнаружено %1'"),
			КоличествоКомпонентов
		);
		// BSLLS:NestedFunctionInParameters-on
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	СоставЦвета = Новый Массив;
	ТипНатуральноеЧисло = МФПовтИсп.ТипНатуральноеЧисло();
	Для Сч = 1 По 3 Цикл
		КомпонентПредставленияЦвета = СокрЛП(СоставПредставленияЦвета[Сч - 1]);
		ЗначениеКомпонентаЦвета = ТипНатуральноеЧисло.ПривестиЗначение(КомпонентПредставленияЦвета);
		Если Формат(ЗначениеКомпонентаЦвета, "ЧН=; ЧГ=") <> КомпонентПредставленияЦвета Тогда
			// BSLLS:NestedFunctionInParameters-off
			ТекстИсключения = СтрШаблон(
				НСтр("ru='Ошибка преобразования значения компонента цвета ""%1"" в число'"),
				КомпонентПредставленияЦвета
			);
			// BSLLS:NestedFunctionInParameters-on
			
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		Если ЗначениеКомпонентаЦвета < 0 Или ЗначениеКомпонентаЦвета > 255 Тогда // BSLLS:MagicNumber-off
			// BSLLS:NestedFunctionInParameters-off
			ТекстИсключения = СтрШаблон(
				НСтр("ru='Компонент цвета ""%1"" должен быть в диапазоне от 0 до 255'"),
				Формат(ЗначениеКомпонентаЦвета, "ЧН=; ЧГ=")
			);
			// BSLLS:NestedFunctionInParameters-on
			
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		СоставЦвета.Добавить(ЗначениеКомпонентаЦвета);
	КонецЦикла;
	
	// BSLLS:StyleElementConstructors-off
	ЗначениеЦвета = Новый Цвет(
		СоставЦвета[0], // Красный
		СоставЦвета[1], // Зеленый
		СоставЦвета[2]  // Синий
	);
	// BSLLS:StyleElementConstructors-on
КонецПроцедуры

Процедура ОбработатьТипHex(ПредставлениеЗначения, ЗначениеЦвета) // BSLLS:LatinAndCyrillicSymbolInWord-off
	ДлинаПредставления = СтрДлина(ПредставлениеЗначения);
	ОжидаемаяДлина = 6;
	Если ДлинаПредставления <> ОжидаемаяДлина Тогда
		// BSLLS:NestedFunctionInParameters-off
		ТекстИсключения = СтрШаблон(
			НСтр("ru='Длина значения цвета ""%1"" не соответствует ожидаемой: %2'"),
			ПредставлениеЗначения,
			ОжидаемаяДлина
		);
		// BSLLS:NestedFunctionInParameters-on
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	СоставЦвета = Новый Массив;
	Попытка
		Буфер = ПолучитьБуферДвоичныхДанныхИзHexСтроки(ПредставлениеЗначения);
	Исключение
		// BSLLS:NestedFunctionInParameters-off
		ТекстИсключения = СтрШаблон(
			НСтр("ru='Значение цвета ""%1"" не является числом в шестнадцатеричном виде'"),
			ПредставлениеЗначения
		);
		// BSLLS:NestedFunctionInParameters-on
		
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;
	
	Для Сч = 0 По 2 Цикл
		СоставЦвета.Добавить(Буфер[Сч]);
	КонецЦикла;
	
	// BSLLS:StyleElementConstructors-off
	ЗначениеЦвета = Новый Цвет(
		СоставЦвета[0], // Красный
		СоставЦвета[1], // Зеленый
		СоставЦвета[2]  // Синий
	);
	// BSLLS:StyleElementConstructors-on
КонецПроцедуры

#КонецОбласти

#КонецОбласти
